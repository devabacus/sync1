// lib/features/home/data/repositories/category_repository_impl.dart

import 'dart:async';
import 'package:drift/drift.dart';
import 'package:sync1_client/sync1_client.dart' as serverpod;

import '../../../../core/database/local/database.dart';
import '../../domain/entities/category/category.dart';
import '../../domain/entities/extensions/category_entity_extension.dart';
import '../../domain/repositories/category_repository.dart';
import '../datasources/local/dao/category/category_dao.dart';
import '../datasources/local/dao/category/sync_metadata_dao.dart';
import '../datasources/local/interfaces/category_local_datasource_service.dart';
import '../datasources/local/sources/category_local_data_source.dart';
import '../datasources/local/tables/category_table.dart';
import '../datasources/local/tables/extensions/category_table_extension.dart';
import '../datasources/remote/interfaces/category_remote_datasource_service.dart';
import '../datasources/remote/sources/category_remote_data_source.dart';
import '../models/extensions/category_model_extension.dart';

class CategoryRepositoryImpl implements ICategoryRepository {
  static const String _entityType = 'categories';

  final ICategoryLocalDataSource _localDataSource;
  final ICategoryRemoteDataSource _remoteDataSource;
  final SyncMetadataDao _syncMetadataDao;
  final CategoryDao _categoryDao;

  StreamSubscription? _serverStreamSubscription;
  bool _isSyncing = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π

  CategoryRepositoryImpl(
    this._localDataSource,
    this._remoteDataSource,
    this._syncMetadataDao,
  ) : _categoryDao = (_localDataSource as CategoryLocalDataSource).categoryDao {
    _initServerSync();
  }

  void _initServerSync() {
    if (_serverStreamSubscription != null) return;
    _serverStreamSubscription = _remoteDataSource.watchCategories().listen(
      (serverCategories) => _performDifferentialSync(serverCategories),
      onError: (error) => print('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞: $error'),
    );
  }

  /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –¢–µ–ø–µ—Ä—å –æ–Ω –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π.
  Future<void> _performDifferentialSync(List<serverpod.Category> serverCategories) async {
    if (_isSyncing) return;
    _isSyncing = true;
    print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (${serverCategories.length} –∑–∞–ø–∏—Å–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞)');

    try {
      final localCategories = await _categoryDao.getCategories();
      final serverCategoriesMap = {for (var c in serverCategories) c.id.toString(): c};
      final localCategoriesMap = {for (var c in localCategories) c.id: c};

      await _categoryDao.db.transaction(() async {
        // 1. –£–¥–∞–ª–µ–Ω–∏–µ: –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
        final recordsToDelete = localCategoriesMap.keys.toSet().difference(serverCategoriesMap.keys.toSet());
        for (final id in recordsToDelete) {
          await _categoryDao.deleteCategory(id);
          print('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: $id');
        }

        // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º —Å —Å–µ—Ä–≤–µ—Ä–∞.
        for (final serverCategory in serverCategories) {
          final localCategory = localCategoriesMap[serverCategory.id.toString()];

          if (localCategory == null) {
            await _insertServerCategory(serverCategory);
            print('‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: ${serverCategory.title}');
          } else {
            await _resolveConflict(localCategory, serverCategory);
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await _syncMetadataDao.updateLastSyncTimestamp(_entityType, DateTime.now().toUtc());
      });
      print('‚úÖ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e, stackTrace) {
      print('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: $e\n$stackTrace');
    } finally {
      _isSyncing = false;
    }
  }
  
  Future<void> _insertServerCategory(serverpod.Category serverCategory) async {
    final companion = serverCategory.toCompanion(SyncStatus.synced);
    await _categoryDao.db.into(_categoryDao.categoryTable).insert(companion);
  }
  
  /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã.
  Future<void> _resolveConflict(CategoryTableData local, serverpod.Category server) async {
    if (local.syncStatus == SyncStatus.local) {
      print('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å "${local.title}". –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.');
      return;
    }
    
    final serverMillis = server.lastModified?.millisecondsSinceEpoch ?? 0;
    final localMillis = local.lastModified.millisecondsSinceEpoch;

    if (serverMillis > localMillis) {
      await _categoryDao.updateCategory(server.toCompanion(SyncStatus.synced));
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: ${server.title}');
    }
  }

  @override
  Stream<List<CategoryEntity>> watchCategories() {
    return _localDataSource.watchCategories().map((models) => models.toEntities());
  }

  /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.
  @override
  Future<String> createCategory(CategoryEntity category) async {
    final companion = category.toModel().toCompanion().copyWith(syncStatus: const Value(SyncStatus.local));
    await _categoryDao.createCategory(companion);
    _syncCreateToServer(category).catchError((e) => print('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ): $e'));
    return category.id;
  }

  @override
  Future<bool> updateCategory(CategoryEntity category) async {
    final companion = category.toModel().toCompanion().copyWith(syncStatus: const Value(SyncStatus.local));
    final result = await _categoryDao.updateCategory(companion);
    _syncUpdateToServer(category).catchError((e) => print('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ): $e'));
    return result;
  }

  @override
  Future<bool> deleteCategory(String id) async {
    final result = await _categoryDao.deleteCategory(id);
    _syncDeleteToServer(id).catchError((e) => print('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ): $e'));
    return result;
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ
  Future<void> _syncCreateToServer(CategoryEntity category) async {
    final serverCategory = category.toServerpodCategory();
    final syncedCategory = await _remoteDataSource.createCategory(serverCategory);
    await _categoryDao.updateCategory(syncedCategory.toCompanion(SyncStatus.synced));
    print('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
  }

  Future<void> _syncUpdateToServer(CategoryEntity category) async {
    final serverCategory = category.toServerpodCategory();
    await _remoteDataSource.updateCategory(serverCategory);
    await _categoryDao.updateCategory(serverCategory.toCompanion(SyncStatus.synced));
    print('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
  }

  Future<void> _syncDeleteToServer(String id) async {
    await _remoteDataSource.deleteCategory(serverpod.UuidValue.fromString(id));
    print('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ "$id" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
  }

  @override
  Future<void> syncWithServer() async {
    try {
      print('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
      final lastSync = await _syncMetadataDao.getLastSyncTimestamp(_entityType);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–ª—å—Ç–∞-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      final serverCategories = await _getServerChangesSince(lastSync);

      if (serverCategories.isNotEmpty) {
        await _performDifferentialSync(serverCategories);
      }
      await _syncLocalChangesToServer();
      print('‚úÖ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      rethrow;
    }
  }

  Future<List<serverpod.Category>> _getServerChangesSince(DateTime? since) async {
    // –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à remoteDataSource –∏–º–µ–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
    return await (_remoteDataSource as CategoryRemoteDataSource).getCategoriesSince(since);
  }  

  // lib/features/home/data/repositories/category_repository_impl.dart

  Future<void> _syncLocalChangesToServer() async {
    // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    final localChanges = await (_categoryDao.select(_categoryDao.categoryTable)
          ..where((t) => t.syncStatus.equals(SyncStatus.local.name)))
        .get();
        
    print('üì§ –ù–∞–π–¥–µ–Ω—ã ${localChanges.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');

    if (localChanges.isEmpty) return;

    // 2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –∏ —Ä–µ—à–∞–µ–º, —á—Ç–æ —Å –Ω–µ–π –¥–µ–ª–∞—Ç—å
    for (final localChange in localChanges) {
      final entity = localChange.toModel().toEntity();
      print('  -> –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å: "${entity.title}" (ID: ${entity.id})');
      
      try {
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ—ë –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
        final serverRecord = await _remoteDataSource.getCategoryById(serverpod.UuidValue.fromString(entity.id));
        
        if (serverRecord != null) {
          // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É–∂–µ –µ—Å—Ç—å - –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –±—ã–ª–æ –æ—Ñ–ª–∞–π–Ω-–û–ë–ù–û–í–õ–ï–ù–ò–ï.
          print('    -- –ó–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±–Ω–æ–≤–ª—è–µ–º...');
          await _syncUpdateToServer(entity);
        } else {
          // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç - –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –±—ã–ª–æ –æ—Ñ–ª–∞–π–Ω-–°–û–ó–î–ê–ù–ò–ï.
          print('    -- –ó–∞–ø–∏—Å—å –Ω–æ–≤–∞—è. –°–æ–∑–¥–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
          await _syncCreateToServer(entity);
        }
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ ${localChange.id}: $e');
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º—ã –Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏, –æ—Å—Ç–∞–≤–ª—è—è –µ–µ `local`,
        // —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.
      }
    }
  }

  @override
  void dispose() {
    _serverStreamSubscription?.cancel();
    _serverStreamSubscription = null;
  }

  @override
  Future<List<CategoryEntity>> getCategories() async => _localDataSource.getCategories().then((models) => models.toEntities());

  @override
  Future<CategoryEntity> getCategoryById(String id) async => _localDataSource.getCategoryById(id).then((model) => model.toEntity());
}


// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ò—Ö –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.
extension on CategoryEntity {
  serverpod.Category toServerpodCategory() => serverpod.Category(
        id: serverpod.UuidValue.fromString(id),
        title: title,
        lastModified: lastModified,
      );
}

extension on serverpod.Category {
  CategoryTableCompanion toCompanion(SyncStatus status) => CategoryTableCompanion(
        id: Value(id.toString()),
        title: Value(title),
        lastModified: Value(lastModified ?? DateTime.now()),
        syncStatus: Value(status),
      );
}