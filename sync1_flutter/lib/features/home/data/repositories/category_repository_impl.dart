import 'dart:async';
import 'dart:math';

import 'package:drift/drift.dart';
import 'package:sync1/features/home/data/datasources/local/tables/extensions/category_table_extension.dart';
import 'package:sync1/features/home/data/models/extensions/category_model_extension.dart';
import 'package:sync1/features/home/domain/entities/extensions/category_entity_extension.dart';
import 'package:sync1_client/sync1_client.dart' as serverpod;

import '../../../../core/database/local/database.dart';
import '../../../../core/providers/session_manager_provider.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../domain/entities/category/category.dart';
import '../../domain/repositories/category_repository.dart';
import '../datasources/local/dao/category/category_dao.dart';
import '../datasources/local/dao/category/sync_metadata_dao.dart';
import '../datasources/local/interfaces/category_local_datasource_service.dart';
import '../datasources/local/sources/category_local_data_source.dart';
import '../datasources/local/tables/category_table.dart';
import '../datasources/remote/interfaces/category_remote_datasource_service.dart';

class CategoryRepositoryImpl implements ICategoryRepository {
  static const String _entityType = 'categories';

  final ICategoryLocalDataSource _localDataSource;
  final ICategoryRemoteDataSource _remoteDataSource;
  final SyncMetadataDao _syncMetadataDao;
  final CategoryDao _categoryDao;
  final Ref _ref; // –î–æ–±–∞–≤–ª—è–µ–º Ref –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º

  StreamSubscription? _eventStreamSubscription;
  bool _isSyncing = false;
  bool _isDisposed = false;
  int _reconnectionAttempt = 0;

  CategoryRepositoryImpl(
    this._localDataSource,
    this._remoteDataSource,
    this._syncMetadataDao,
    this._ref, // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  ) : _categoryDao = (_localDataSource as CategoryLocalDataSource).categoryDao {
    _initEventBasedSync();
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  int? get _currentUserId {
    final user = _ref.read(currentUserProvider);
    return user?.id;
  }

  void _initEventBasedSync() {
    if (_isDisposed) return;

    print('üåä –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞... (–ø–æ–ø—ã—Ç–∫–∞ #${_reconnectionAttempt + 1})');
    _eventStreamSubscription?.cancel();

    _eventStreamSubscription = _remoteDataSource.watchEvents().listen(
      (event) {
        print('‚ö°Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${event.type.name}');
        if (_reconnectionAttempt > 0) {
          print('üëç –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å real-time —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        }
        _reconnectionAttempt = 0;
        _handleSyncEvent(event);
      },
      onError: (error) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞ —Å–æ–±—ã—Ç–∏–π: $error. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        _scheduleReconnection();
      },
      onDone: () {
        print('üîå –°—Ç—Ä–∏–º —Å–æ–±—ã—Ç–∏–π –±—ã–ª –∑–∞–∫—Ä—ã—Ç (onDone). –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        _scheduleReconnection();
      },
      cancelOnError: true,
    );
  }

  void _scheduleReconnection() {
    if (_isDisposed) return;
    _eventStreamSubscription?.cancel();
    final delaySeconds = min(pow(2, _reconnectionAttempt), 60).toInt();
    print('‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ $delaySeconds —Å–µ–∫—É–Ω–¥.');

    Future.delayed(Duration(seconds: delaySeconds), () {
      _reconnectionAttempt++;
      _initEventBasedSync();
    });
  }

  @override
  void dispose() {
    print('üõë –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ CategoryRepositoryImpl. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏.');
    _isDisposed = true;
    _eventStreamSubscription?.cancel();
  }

  Future<void> _handleSyncEvent(serverpod.CategorySyncEvent event) async {
    final currentUserId = _currentUserId;
    if (currentUserId == null) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

    switch (event.type) {
      case serverpod.SyncEventType.create:
        if (event.category != null && event.category!.userId == currentUserId) {
          await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
              event.category!.toCompanion(SyncStatus.synced));
          print('  -> –õ–æ–∫–∞–ª—å–Ω–æ –°–û–ó–î–ê–ù–ê –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${event.category!.title}" –ø–æ —Å–æ–±—ã—Ç–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.');
        }
        break;
      case serverpod.SyncEventType.update:
        if (event.category != null && event.category!.userId == currentUserId) {
          final localCopy = await (_categoryDao.select(_categoryDao.categoryTable)
                ..where((t) => t.id.equals(event.category!.id.toString())))
              .getSingleOrNull();

          if (localCopy?.syncStatus == SyncStatus.local) {
            print('  -> –ö–û–ù–§–õ–ò–ö–¢: –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è "${localCopy!.title}" –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.');
          } else {
            await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
                event.category!.toCompanion(SyncStatus.synced));
            print('  -> –õ–æ–∫–∞–ª—å–Ω–æ –û–ë–ù–û–í–õ–ï–ù–ê –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${event.category!.title}" –ø–æ —Å–æ–±—ã—Ç–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.');
          }
        }
        break;
      case serverpod.SyncEventType.delete:
        if (event.id != null) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª—è–µ–º–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          final localRecord = await (_categoryDao.select(_categoryDao.categoryTable)
                ..where((t) => t.id.equals(event.id!.toString())))
              .getSingleOrNull();
          
          if (localRecord?.userId == currentUserId) {
            await _categoryDao.physicallyDeleteCategory(event.id!.toString());
            print('  -> –õ–æ–∫–∞–ª—å–Ω–æ –£–î–ê–õ–ï–ù–ê –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID "${event.id}" –ø–æ —Å–æ–±—ã—Ç–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.');
          }
        }
        break;
    }
  }

  @override
  Future<void> syncWithServer() async {
    final currentUserId = _currentUserId;
    if (currentUserId == null) {
      print('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    if (_isSyncing) {
      print('‚ÑπÔ∏è –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫.');
      return;
    }
    _isSyncing = true;
    print('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $currentUserId...');
    try {
      await _syncLocalChangesToServer();

      print('üïí –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏...');
      final allServerCategories = await _remoteDataSource.getCategories();

      await _applyServerState(allServerCategories);

      print('‚úÖ –†—É—á–Ω–∞—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      rethrow;
    } finally {
      _isSyncing = false;
    }
  }

  Future<void> _applyServerState(List<serverpod.Category> serverCategories) async {
    final currentUserId = _currentUserId;
    if (currentUserId == null) return;

    print('‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ (${serverCategories.length} –∑–∞–ø–∏—Å–µ–π)...');
    try {
      final localCategories = await _categoryDao.getCategories(userId: currentUserId);
      final serverCategoriesMap = {
        for (var c in serverCategories) c.id.toString(): c
      };
      final localCategoriesMap = {for (var c in localCategories) c.id: c};

      await _categoryDao.db.transaction(() async {
        final recordsToDelete = localCategoriesMap.values
            .where((localCat) =>
                !serverCategoriesMap.containsKey(localCat.id) &&
                localCat.syncStatus == SyncStatus.synced &&
                localCat.userId == currentUserId)
            .map((localCat) => localCat.id)
            .toList();

        if (recordsToDelete.isNotEmpty) {
          print('üóëÔ∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${recordsToDelete.length} –∑–∞–ø–∏—Å–µ–π, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
          for (final id in recordsToDelete) {
            await _categoryDao.physicallyDeleteCategory(id);
          }
        }

        for (final serverCategory in serverCategories) {
          if (serverCategory.userId == currentUserId) {
            final localCategory = localCategoriesMap[serverCategory.id.toString()];

            if (localCategory == null) {
              await _insertServerCategory(serverCategory);
            } else {
              await _resolveConflict(localCategory, serverCategory);
            }
          }
        }

        await _syncMetadataDao.updateLastSyncTimestamp(_entityType, DateTime.now().toUtc());
      });
      print('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ.');
    } catch (e, stackTrace) {
      print('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: $e\n$stackTrace');
    }
  }

  Future<void> _insertServerCategory(serverpod.Category serverCategory) async {
    print('‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverCategory.title}');
    final companion = serverCategory.toCompanion(SyncStatus.synced);
    await _categoryDao.db.into(_categoryDao.categoryTable).insert(companion);
  }

  Future<void> _resolveConflict(CategoryTableData local, serverpod.Category server) async {
    if (local.syncStatus == SyncStatus.local) {
      print('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å "${local.title}". –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.');
      return;
    }

    final serverMillis = server.lastModified?.millisecondsSinceEpoch ?? 0;
    final localMillis = local.lastModified.millisecondsSinceEpoch;

    if (serverMillis > localMillis) {
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: ${server.title}');
      await _categoryDao.updateCategory(server.toCompanion(SyncStatus.synced));
    }
  }

  @override
  Stream<List<CategoryEntity>> watchCategories() {
    final currentUserId = _currentUserId;
    return _localDataSource
        .watchCategories(userId: currentUserId)
        .map((models) => models.toEntities());
  }

  @override
  Future<String> createCategory(CategoryEntity category) async {
    final currentUserId = _currentUserId;
    if (currentUserId == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    final categoryWithUser = category.copyWith(userId: currentUserId);
    final companion = categoryWithUser
        .toModel()
        .toCompanion()
        .copyWith(syncStatus: const Value(SyncStatus.local));
    
    await _categoryDao.createCategory(companion);
    _syncCreateToServer(categoryWithUser).catchError((e) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ "${categoryWithUser.title}". –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: $e');
    });
    return categoryWithUser.id;
  }

  @override
  Future<bool> updateCategory(CategoryEntity category) async {
    final currentUserId = _currentUserId;
    if (currentUserId == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    final categoryWithUser = category.copyWith(userId: currentUserId);
    final companion = categoryWithUser
        .toModel()
        .toCompanion()
        .copyWith(syncStatus: const Value(SyncStatus.local));
    
    final result = await _categoryDao.updateCategory(companion);
    _syncUpdateToServer(categoryWithUser).catchError((e) => print(
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${categoryWithUser.title}". –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: $e'));
    return result;
  }

  @override
  Future<bool> deleteCategory(String id) async {
    final result = await _categoryDao.softDeleteCategory(id);
    _syncDeleteToServer(id).catchError(
        (e) => print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ "$id". –û—à–∏–±–∫–∞: $e'));
    return result;
  }

  Future<void> _syncCreateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      final syncedCategory = await _remoteDataSource.createCategory(serverCategory);
      await _categoryDao.updateCategory(syncedCategory.toCompanion(SyncStatus.synced));
      print('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è "${category.title}": $e');
      rethrow;
    }
  }

  Future<void> _syncUpdateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      await _remoteDataSource.updateCategory(serverCategory);
      await _categoryDao.updateCategory(serverCategory.toCompanion(SyncStatus.synced));
      print('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è "${category.title}": $e');
      rethrow;
    }
  }

  Future<void> _syncDeleteToServer(String id) async {
    try {
      await _remoteDataSource.deleteCategory(serverpod.UuidValue.fromString(id));
      print('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ "$id" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch (e) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ "$id". –û—à–∏–±–∫–∞: $e');
      rethrow;
    }
  }

  Future<void> _syncLocalChangesToServer() async {
    final currentUserId = _currentUserId;
    if (currentUserId == null) return;

    final localChanges = await (_categoryDao.select(_categoryDao.categoryTable)
          ..where((t) =>
              (t.syncStatus.equals(SyncStatus.local.name) |
               t.syncStatus.equals(SyncStatus.deleted.name)) &
              t.userId.equals(currentUserId)))
        .get();

    if (localChanges.isEmpty) {
      print('üì§ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç.');
      return;
    }

    print('üì§ –ù–∞–π–¥–µ–Ω—ã ${localChanges.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');

    for (final localChange in localChanges) {
      if (localChange.syncStatus == SyncStatus.deleted) {
        print('  -> –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è ID: ${localChange.id}');
        try {
          await _syncDeleteToServer(localChange.id);
          await _categoryDao.physicallyDeleteCategory(localChange.id);
          print('  ‚úÖ "–ù–∞–¥–≥—Ä–æ–±–∏–µ" –¥–ª—è ID ${localChange.id} –æ—á–∏—â–µ–Ω–æ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.');
        } catch (e) {
          print('  -> –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ID ${localChange.id} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ.');
        }
      } else if (localChange.syncStatus == SyncStatus.local) {
        final entity = localChange.toModel().toEntity();
        print('  -> –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: "${entity.title}"');

        try {
          final serverRecord = await _remoteDataSource
              .getCategoryById(serverpod.UuidValue.fromString(entity.id));

          if (serverRecord != null) {
            await _syncUpdateToServer(entity);
          } else {
            await _syncCreateToServer(entity);
          }
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ ${localChange.id}: $e');
        }
      }
    }
    print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  }

  @override
  Future<List<CategoryEntity>> getCategories() async {
    final currentUserId = _currentUserId;
    return _localDataSource
        .getCategories(userId: currentUserId)
        .then((models) => models.toEntities());
  }

  @override
  Future<CategoryEntity> getCategoryById(String id) async =>
      _localDataSource.getCategoryById(id).then((model) => model.toEntity());
}

extension on CategoryEntity {
  serverpod.Category toServerpodCategory() => serverpod.Category(
        id: serverpod.UuidValue.fromString(id),
        title: title,
        lastModified: lastModified,
        userId: userId,
      );
}

extension on serverpod.Category {
  CategoryTableCompanion toCompanion(SyncStatus status) =>
      CategoryTableCompanion(
        id: Value(id.toString()),
        title: Value(title),
        lastModified: Value(lastModified ?? DateTime.now()),
        userId: Value(userId),
        syncStatus: Value(status),
      );
}