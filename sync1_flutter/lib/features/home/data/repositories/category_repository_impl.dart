import 'dart:async';
import 'dart:math';

import 'package:drift/drift.dart';
import 'package:sync1/features/home/data/datasources/local/tables/extensions/category_table_extension.dart';
import 'package:sync1/features/home/data/models/extensions/category_model_extension.dart';
import 'package:sync1/features/home/domain/entities/extensions/category_entity_extension.dart';
import 'package:sync1_client/sync1_client.dart' as serverpod;

import '../../../../core/database/local/database.dart';
import '../../domain/entities/category/category.dart';
import '../../domain/repositories/category_repository.dart';
import '../datasources/local/dao/category/category_dao.dart';
import '../datasources/local/dao/category/sync_metadata_dao.dart';
import '../datasources/local/interfaces/category_local_datasource_service.dart';
import '../datasources/local/sources/category_local_data_source.dart';
import '../datasources/local/tables/category_table.dart';
import '../datasources/remote/interfaces/category_remote_datasource_service.dart';

class CategoryRepositoryImpl implements ICategoryRepository {
  static const String _entityType = 'categories';

  final ICategoryLocalDataSource _localDataSource;
  final ICategoryRemoteDataSource _remoteDataSource;
  final SyncMetadataDao _syncMetadataDao;
  final CategoryDao _categoryDao;
  final int _userId; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π userId –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

  StreamSubscription? _eventStreamSubscription;
  bool _isSyncing = false;
  bool _isDisposed = false;
  int _reconnectionAttempt = 0;

  CategoryRepositoryImpl(
    this._localDataSource,
    this._remoteDataSource,
    this._syncMetadataDao,
    this._userId, // –ü—Ä–∏–Ω–∏–º–∞–µ–º userId –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
  ) : _categoryDao = (_localDataSource as CategoryLocalDataSource).categoryDao {
    print('‚úÖ CategoryRepositoryImpl: –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è userId: $_userId');
    _initEventBasedSync();
  }

  void _initEventBasedSync() {
  if (_isDisposed) return;

  print('üåä CategoryRepositoryImpl: _initEventBasedSync –¥–ª—è userId: $_userId. –ü–æ–ø—ã—Ç–∫–∞ #${_reconnectionAttempt + 1}');
  _eventStreamSubscription?.cancel(); // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é, –µ—Å–ª–∏ –µ—Å—Ç—å

  if (_reconnectionAttempt == 0) { // –¢–æ–ª—å–∫–æ –¥–ª—è —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
    print('‚è±Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π WebSocket –¥–ª—è userId: $_userId...');
    Future.delayed(const Duration(seconds: 2), () { // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
      if (_isDisposed) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
      _subscribeToEvents();
    });
  } else {
    _subscribeToEvents(); // –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–∏–∑ _scheduleReconnection) - –±–µ–∑ –¥–æ–ø. –∑–∞–¥–µ—Ä–∂–∫–∏
  }
}

 void _scheduleReconnection() {
  if (_isDisposed) return;
  _eventStreamSubscription?.cancel();
  // –£–≤–µ–ª–∏—á–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 5 —Å–µ–∫—É–Ω–¥
  final delaySeconds = min(pow(2, _reconnectionAttempt).toInt(), 60);
  print('‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ $delaySeconds —Å–µ–∫—É–Ω–¥.');

  Future.delayed(Duration(seconds: delaySeconds), () {
    _reconnectionAttempt++;
    _initEventBasedSync();
  });
}

  @override
  void dispose() {
    // –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –õ–û–ì:
    print('üõë CategoryRepositoryImpl: –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è userId: $_userId. _isDisposed –¥–æ –≤—ã–∑–æ–≤–∞: $_isDisposed');
    _isDisposed = true;
    _eventStreamSubscription?.cancel();
    // –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –õ–û–ì:
    print('üõë CategoryRepositoryImpl: –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è userId: $_userId –£–°–ü–ï–®–ù–û –£–ù–ò–ß–¢–û–ñ–ï–ù. _isDisposed –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞: $_isDisposed');
  }

  Future<void> _handleSyncEvent(serverpod.CategorySyncEvent event) async {
    
    switch (event.type) {
      case serverpod.SyncEventType.create:
        if (event.category != null && event.category!.userId == _userId) {
          await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
              event.category!.toCompanion(SyncStatus.synced));
          print('  -> –õ–æ–∫–∞–ª—å–Ω–æ –°–û–ó–î–ê–ù–ê –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${event.category!.title}" –ø–æ —Å–æ–±—ã—Ç–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.');
        }
        break;
      case serverpod.SyncEventType.update:
        if (event.category != null && event.category!.userId == _userId) {
          final localCopy = await (_categoryDao.select(_categoryDao.categoryTable)
                ..where((t) => t.id.equals(event.category!.id.toString())))
              .getSingleOrNull();

          if (localCopy?.syncStatus == SyncStatus.local) {
            print('  -> –ö–û–ù–§–õ–ò–ö–¢: –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è "${localCopy!.title}" –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.');
          } else {
            await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
                event.category!.toCompanion(SyncStatus.synced));
            print('  -> –õ–æ–∫–∞–ª—å–Ω–æ –û–ë–ù–û–í–õ–ï–ù–ê –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${event.category!.title}" –ø–æ —Å–æ–±—ã—Ç–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.');
          }
        }
        break;
      case serverpod.SyncEventType.delete:
        if (event.id != null) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª—è–µ–º–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          final localRecord = await (_categoryDao.select(_categoryDao.categoryTable)
                ..where((t) => t.id.equals(event.id!.toString())))
              .getSingleOrNull();
          
          if (localRecord?.userId == _userId) {
            await _categoryDao.physicallyDeleteCategory(event.id!.toString(), userId: _userId);
            print('  -> –õ–æ–∫–∞–ª—å–Ω–æ –£–î–ê–õ–ï–ù–ê –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID "${event.id}" –ø–æ —Å–æ–±—ã—Ç–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.');
          }
        }
        break;
    }
  }

  @override
  Future<void> syncWithServer() async {
    if (_isSyncing) {
      print('‚ÑπÔ∏è –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId. –ü—Ä–æ–ø—É—Å–∫.');
      return;
    }
    _isSyncing = true;
    print('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId...');
    try {
      await _syncLocalChangesToServer();

      print('üïí –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏...');
      final allServerCategories = await _remoteDataSource.getCategories();

      await _applyServerState(allServerCategories);

      print('‚úÖ –†—É—á–Ω–∞—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId: $e');
      rethrow;
    } finally {
      _isSyncing = false;
    }
  }

  Future<void> _applyServerState(List<serverpod.Category> serverCategories) async {
  print('‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ (${serverCategories.length} –∑–∞–ø–∏—Å–µ–π) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId...');
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø—Ä–∏—à–µ–¥—à–∏—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  for (var sc in serverCategories) {
    print('  —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å: ID=${sc.id}, Title=${sc.title}, UserID=${sc.userId}, LastModified=${sc.lastModified}');
  }

  try {
    final localCategories = await _categoryDao.getCategories(userId: _userId);
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ ID, –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    print('  –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ —Å–ª–∏—è–Ω–∏–µ–º: ${localCategories.length}');
    for (var lc in localCategories) {
      print('  –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: ID=${lc.id}, Title=${lc.title}, UserID=${lc.userId}, SyncStatus=${lc.syncStatus}, LastModified=${lc.lastModified}');
    }

    final serverCategoriesMap = {
      for (var c in serverCategories) c.id.toString(): c
    };
    final localCategoriesMap = {for (var c in localCategories) c.id: c};

    await _categoryDao.db.transaction(() async {
      // –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
      // –≠—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–º –∫–ª–∏–µ–Ω—Ç–µ.
      final recordsToDelete = localCategoriesMap.values
          .where((localCat) =>
              !serverCategoriesMap.containsKey(localCat.id) && // –ù–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
              localCat.syncStatus == SyncStatus.synced &&      // –ë—ã–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
              localCat.userId == _userId)                      // –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          .map((localCat) => localCat.id)
          .toList();

      if (recordsToDelete.isNotEmpty) {
        print('üóëÔ∏è –ë—É–¥–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ ${recordsToDelete.length} –∑–∞–ø–∏—Å–µ–π, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–∏ –±—ã–≤—à–∏—Ö synced).');
        for (final id in recordsToDelete) {
          print('    –£–¥–∞–ª–µ–Ω–∏–µ ID: $id');
          await _categoryDao.physicallyDeleteCategory(id, userId: _userId);
        }
      }

      // –®–∞–≥ 2: –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞.
      for (final serverCategory in serverCategories) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ö–æ—Ç—è getCategories –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å)
        if (serverCategory.userId == _userId) { 
          print('  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ID=${serverCategory.id}, Title=${serverCategory.title}');
          final localCategoryData = localCategoriesMap[serverCategory.id.toString()];

          if (localCategoryData == null) {
            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ - –≤—Å—Ç–∞–≤–ª—è–µ–º.
            print('    -> –õ–æ–∫–∞–ª—å–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∫–∞–∫ SyncStatus.synced.');
            await _insertServerCategory(serverCategory);
          } else {
            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∏ –ª–æ–∫–∞–ª—å–Ω–æ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç.
            print('    -> –õ–æ–∫–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ (ID=${localCategoryData.id}, Title=${localCategoryData.title}, SyncStatus=${localCategoryData.syncStatus}). –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.');
            await _resolveConflict(localCategoryData, serverCategory);
          }
        } else {
          // –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π getCategories –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ userId
          print('  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ID=${serverCategory.id}, Title=${serverCategory.title} - –Ω–µ–≤–µ—Ä–Ω—ã–π userId ${serverCategory.userId} (–æ–∂–∏–¥–∞–ª—Å—è $_userId)');
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _syncMetadataDao.updateLastSyncTimestamp(_entityType, DateTime.now().toUtc());
    });
    print('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId.');
  } catch (e, stackTrace) {
    print('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId: $e\n$stackTrace');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
  }
}

  Future<void> _insertServerCategory(serverpod.Category serverCategory) async {
    print('‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverCategory.title}');
    final companion = serverCategory.toCompanion(SyncStatus.synced);
    await _categoryDao.db.into(_categoryDao.categoryTable).insert(companion);
  }

  Future<void> _resolveConflict(CategoryTableData local, serverpod.Category server) async {
    if (local.syncStatus == SyncStatus.local) {
      print('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å "${local.title}". –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.');
      return;
    }

    final serverMillis = server.lastModified?.millisecondsSinceEpoch ?? 0;
    final localMillis = local.lastModified.millisecondsSinceEpoch;

    if (serverMillis > localMillis) {
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: ${server.title}');
      await _categoryDao.updateCategory(server.toCompanion(SyncStatus.synced), userId: _userId);
    }
  }

  @override
  Stream<List<CategoryEntity>> watchCategories() {
    return _localDataSource
        .watchCategories(userId: _userId)
        .map((models) => models.toEntities());
  }

  @override
  Future<String> createCategory(CategoryEntity category) async {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ category —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π userId
    final categoryWithUser = category.copyWith(userId: _userId);
    final companion = categoryWithUser
        .toModel()
        .toCompanion()
        .copyWith(syncStatus: const Value(SyncStatus.local));
    
    await _categoryDao.createCategory(companion);
    _syncCreateToServer(categoryWithUser).catchError((e) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ "${categoryWithUser.title}". –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: $e');
    });
    return categoryWithUser.id;
  }

  @override
  Future<bool> updateCategory(CategoryEntity category) async {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ category —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π userId
    final categoryWithUser = category.copyWith(userId: _userId);
    final companion = categoryWithUser
        .toModel()
        .toCompanion()
        .copyWith(syncStatus: const Value(SyncStatus.local));
    
    final result = await _categoryDao.updateCategory(companion, userId: _userId);
    _syncUpdateToServer(categoryWithUser).catchError((e) => print(
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${categoryWithUser.title}". –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: $e'));
    return result;
  }

  @override
  Future<bool> deleteCategory(String id) async {
    final result = await _categoryDao.softDeleteCategory(id, userId: _userId);
    _syncDeleteToServer(id).catchError(
        (e) => print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ "$id". –û—à–∏–±–∫–∞: $e'));
    return result;
  }

  Future<void> _syncCreateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      final syncedCategory = await _remoteDataSource.createCategory(serverCategory);
      await _categoryDao.updateCategory(syncedCategory.toCompanion(SyncStatus.synced), userId: _userId);
      print('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è "${category.title}": $e');
      rethrow;
    }
  }

  Future<void> _syncUpdateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      await _remoteDataSource.updateCategory(serverCategory);
      await _categoryDao.updateCategory(serverCategory.toCompanion(SyncStatus.synced), userId: _userId);
      print('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è "${category.title}": $e');
      rethrow;
    }
  }

  Future<void> _syncDeleteToServer(String id) async {
    try {
      await _remoteDataSource.deleteCategory(serverpod.UuidValue.fromString(id));
      print('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ "$id" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch (e) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ "$id". –û—à–∏–±–∫–∞: $e');
      rethrow;
    }
  }

  Future<void> _syncLocalChangesToServer() async {
    final localChanges = await (_categoryDao.select(_categoryDao.categoryTable)
          ..where((t) =>
              (t.syncStatus.equals(SyncStatus.local.name) |
               t.syncStatus.equals(SyncStatus.deleted.name)) &
              t.userId.equals(_userId)))
        .get();

    if (localChanges.isEmpty) {
      print('üì§ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId.');
      return;
    }

    print('üì§ –ù–∞–π–¥–µ–Ω—ã ${localChanges.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId.');

    for (final localChange in localChanges) {
      if (localChange.syncStatus == SyncStatus.deleted) {
        print('  -> –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è ID: ${localChange.id}');
        try {
          await _syncDeleteToServer(localChange.id);
          await _categoryDao.physicallyDeleteCategory(localChange.id, userId: _userId);
          print('  ‚úÖ "–ù–∞–¥–≥—Ä–æ–±–∏–µ" –¥–ª—è ID ${localChange.id} –æ—á–∏—â–µ–Ω–æ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.');
        } catch (e) {
          print('  -> –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ID ${localChange.id} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ.');
        }
      } else if (localChange.syncStatus == SyncStatus.local) {
        final entity = localChange.toModel().toEntity();
        print('  -> –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: "${entity.title}"');

        try {
          final serverRecord = await _remoteDataSource
              .getCategoryById(serverpod.UuidValue.fromString(entity.id));

          if (serverRecord != null) {
            await _syncUpdateToServer(entity);
          } else {
            await _syncCreateToServer(entity);
          }
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ ${localChange.id}: $e');
        }
      }
    }
    print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId.');
  }

  @override
  Future<List<CategoryEntity>> getCategories() async {
    return _localDataSource
        .getCategories(userId: _userId)
        .then((models) => models.toEntities());
  }

  @override
  Future<CategoryEntity?> getCategoryById(String id) async {
    try {
      return _localDataSource.getCategoryById(id, userId: _userId).then((model) => model.toEntity());
    } catch (e) {
      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      return null;
    }
  }

void _subscribeToEvents() {
  if (_isDisposed) return;
  print('üéß CategoryRepositoryImpl: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è userId: $_userId (–ø–æ–ø—ã—Ç–∫–∞: ${_reconnectionAttempt})');

  _eventStreamSubscription = _remoteDataSource.watchEvents().listen(
    (event) {
      print('‚ö°Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${event.type.name} (–¥–ª—è userId: $_userId)');
      if (_reconnectionAttempt > 0) { // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        print('üëç –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å real-time —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è userId: $_userId!');
        _reconnectionAttempt = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
      }
      _handleSyncEvent(event);
    },
    onError: (error) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è userId: $_userId: $error. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º _reconnectionAttempt –∑–¥–µ—Å—å
      _scheduleReconnection();
    },
    onDone: () {
      print('üîå –°—Ç—Ä–∏–º —Å–æ–±—ã—Ç–∏–π –±—ã–ª –∑–∞–∫—Ä—ã—Ç (onDone) –¥–ª—è userId: $_userId. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º _reconnectionAttempt –∑–¥–µ—Å—å
      _scheduleReconnection();
    },
    cancelOnError: true,
  );
}

}

extension on CategoryEntity {
  serverpod.Category toServerpodCategory() => serverpod.Category(
        id: serverpod.UuidValue.fromString(id),
        title: title,
        lastModified: lastModified,
        userId: userId,
      );
}

extension on serverpod.Category {
  CategoryTableCompanion toCompanion(SyncStatus status) =>
      CategoryTableCompanion(
        id: Value(id.toString()),
        title: Value(title),
        lastModified: Value(lastModified ?? DateTime.now()),
        userId: Value(userId),
        syncStatus: Value(status),
      );
}

