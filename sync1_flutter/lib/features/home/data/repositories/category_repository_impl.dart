// lib/features/home/data/repositories/category_repository_impl.dart

import 'dart:async';

import 'package:drift/drift.dart';
import 'package:sync1_client/sync1_client.dart' as serverpod;

import '../../../../core/database/local/database.dart';
import '../../domain/entities/category/category.dart';
import '../../domain/entities/extensions/category_entity_extension.dart';
import '../../domain/repositories/category_repository.dart';
import '../datasources/local/interfaces/category_local_datasource_service.dart';
import '../datasources/local/sources/category_local_data_source.dart';
import '../datasources/remote/interfaces/category_remote_datasource_service.dart';
import '../models/extensions/category_model_extension.dart';

/// Offline-first Repository –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
class CategoryRepositoryImpl implements ICategoryRepository {
  final ICategoryLocalDataSource _localDataSource;
  final ICategoryRemoteDataSource _remoteDataSource;
  StreamSubscription? _serverStreamSubscription;

  CategoryRepositoryImpl(
    this._localDataSource,
    this._remoteDataSource,
  ) {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    _initServerSync();
  }

  void _initServerSync() {
    if (_serverStreamSubscription != null) return;

    print('üü¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
    _serverStreamSubscription = _remoteDataSource.watchCategories().listen(
      (serverCategories) {
        print('üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
        _performSync(serverCategories);
      },
      onError: (error) {
        print('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞: $error');
      },
      onDone: () {
        print('‚ö´Ô∏è –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.');
        _serverStreamSubscription = null;
      },
    );
  }

  /// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –°—Ç—Ä–∞—Ç–µ–≥–∏—è: "—Å–µ—Ä–≤–µ—Ä - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã".
  Future<void> _performSync(List<serverpod.Category> serverCategories) async {
    try {
      // –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.
      final categoryDao = (_localDataSource as CategoryLocalDataSource).categoryDao;

      await categoryDao.db.transaction(() async {
        // 1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        await categoryDao.deleteAllCategories();
        
        // 2. –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        final companions = serverCategories.map((c) => 
            CategoryTableCompanion.insert(
              id: Value(c.id.toString()),
              title: c.title,
            )
        ).toList();

        if (companions.isNotEmpty) {
          await categoryDao.insertCategories(companions);
        }
      });
      print('‚úÖ –ê–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  @override
  Stream<List<CategoryEntity>> watchCategories() {
    // UI –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Å–ª—É—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
    return _localDataSource.watchCategories().map(
      (models) => models.toEntities(),
    );
  }

  @override
  Future<String> createCategory(CategoryEntity category) async {
    // 1. –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    final localId = await _localDataSource.createCategory(category.toModel());
    
    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ stream.
    _syncCreateToServer(category).catchError((error) {
      print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $error');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∫–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    });
    
    return localId;
  }
  
  // ... –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã CRUD (update, delete) –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ,
  // –æ–Ω–∏ —Ç–∞–∫ –∂–µ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.

  @override
  void dispose() {
    print('Disposing CategoryRepository –∏ –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
    _serverStreamSubscription?.cancel();
    _serverStreamSubscription = null;
  }
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (getCategories, getCategoryById, update, delete, _sync...) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
  
  @override
  Future<List<CategoryEntity>> getCategories() async {
    try {
      final localCategories = await _localDataSource.getCategories();
      return localCategories.toEntities();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
      rethrow;
    }
  }
  
  @override
  Future<CategoryEntity> getCategoryById(String id) async {
    try {
      final model = await _localDataSource.getCategoryById(id);
      return model.toEntity();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID $id: $e');
      rethrow;
    }
  }
  
  @override
  Future<bool> updateCategory(CategoryEntity category) async {
    final localResult = await _localDataSource.updateCategory(category.toModel());
    _syncUpdateToServer(category).catchError((error) {
      print('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $error');
    });
    return localResult;
  }

  @override
  Future<bool> deleteCategory(String id) async {
    final localResult = await _localDataSource.deleteCategory(id);
    _syncDeleteToServer(id).catchError((error) {
      print('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $error');
    });
    return localResult;
  }

  Future<void> _syncCreateToServer(CategoryEntity category) async {
    try {
      final serverpodCategory = serverpod.Category(
        id: serverpod.UuidValue.fromString(category.id),
        title: category.title,
      );
      await _remoteDataSource.createCategory(serverpodCategory);
    } catch (e) {
      print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
      rethrow;
    }
  }

  Future<void> _syncUpdateToServer(CategoryEntity category) async {
    try {
      final serverpodCategory = serverpod.Category(
        id: serverpod.UuidValue.fromString(category.id),
        title: category.title,
      );
      await _remoteDataSource.updateCategory(serverpodCategory);
    } catch (e) {
      print('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
      rethrow;
    }
  }

  Future<void> _syncDeleteToServer(String id) async {
    try {
      final uuidValue = serverpod.UuidValue.fromString(id);
      await _remoteDataSource.deleteCategory(uuidValue);
    } catch (e) {
      print('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
      rethrow;
    }
  }

  @override
  Future<void> syncWithServer() async {
    try {
      print('–ù–∞—á–∏–Ω–∞–µ–º –†–£–ß–ù–£–Æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
      final serverCategories = await _remoteDataSource.getCategories();
      await _performSync(serverCategories);
      print('–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: $e');
      rethrow;
    }
  }
}