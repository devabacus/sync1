// lib/features/home/data/repositories/category_repository_impl.dart

import 'dart:async';
import 'dart:math';

import 'package:drift/drift.dart';
import 'package:sync1/features/home/data/datasources/local/tables/extensions/category_table_extension.dart';
import 'package:sync1/features/home/data/models/extensions/category_model_extension.dart';
import 'package:sync1/features/home/domain/entities/extensions/category_entity_extension.dart';
import 'package:sync1_client/sync1_client.dart' as serverpod;

import '../../../../core/database/local/database.dart';
import '../../domain/entities/category/category.dart';
import '../../domain/repositories/category_repository.dart';
import '../datasources/local/dao/category/category_dao.dart';
import '../datasources/local/dao/category/sync_metadata_dao.dart';
import '../datasources/local/interfaces/category_local_datasource_service.dart';
import '../datasources/local/sources/category_local_data_source.dart';
import '../datasources/local/tables/category_table.dart';
import '../datasources/remote/interfaces/category_remote_datasource_service.dart';

class CategoryRepositoryImpl implements ICategoryRepository {
  static const String _entityType = 'categories';

  final ICategoryLocalDataSource _localDataSource;
  final ICategoryRemoteDataSource _remoteDataSource;
  final SyncMetadataDao _syncMetadataDao;
  final CategoryDao _categoryDao;
  final int _userId;

  StreamSubscription? _eventStreamSubscription;
  bool _isSyncing = false;
  bool _isDisposed = false;
  int _reconnectionAttempt = 0;
  static const int _maxReconnectionAttempts = 5;

  CategoryRepositoryImpl(
    this._localDataSource,
    this._remoteDataSource,
    this._syncMetadataDao,
    this._userId,
  ) : _categoryDao = (_localDataSource as CategoryLocalDataSource).categoryDao {
    print('‚úÖ CategoryRepositoryImpl: –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è userId: $_userId');
    _initEventBasedSync();
  }
  
  // --- –ù–û–í–ê–Ø, –ù–ê–î–ï–ñ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ---
  @override
  Future<void> syncWithServer() async {
    if (_isSyncing) {
      print('‚ÑπÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId. –ü—Ä–æ–ø—É—Å–∫.');
      return;
    }
    _isSyncing = true;
    print('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId...');

    try {
      final lastSync = await _syncMetadataDao.getLastSyncTimestamp(_entityType, userId: _userId);

      // --- –®–ê–ì 1: –°–ù–ê–ß–ê–õ–ê –ü–û–õ–£–ß–ê–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø –° –°–ï–†–í–ï–†–ê ---
      print('  [1/3] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –º–æ–º–µ–Ω—Ç–∞: $lastSync');
      final serverChanges = await _remoteDataSource.getCategoriesSince(lastSync);
      print('    -> –ü–æ–ª—É—á–µ–Ω–æ ${serverChanges.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞.');

      // --- –®–ê–ì 2: –†–ê–ó–†–ï–®–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–û–í –ò –°–õ–ò–Ø–ù–ò–ï ---
      print('  [2/3] –°–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...');
      final localChangesToPush = await _reconcileChanges(serverChanges);
      print('    -> ${localChangesToPush.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.');

      // --- –®–ê–ì 3: –û–¢–ü–†–ê–í–ö–ê –û–°–¢–ê–í–®–ò–•–°–Ø –õ–û–ö–ê–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
      if (localChangesToPush.isNotEmpty) {
        print('  [3/3] –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        await _pushLocalChanges(localChangesToPush);
      } else {
        print('  [3/3] –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.');
      }

      // –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
      await _syncMetadataDao.updateLastSyncTimestamp(_entityType, DateTime.now().toUtc(), userId: _userId);
      print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId');

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $_userId: $e');
      rethrow;
    } finally {
      _isSyncing = false;
    }
  }

  /// –ú–µ—Ç–æ–¥ –¥–ª—è —Å–ª–∏—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
  Future<List<CategoryTableData>> _reconcileChanges(List<serverpod.Category> serverChanges) async {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    final allLocalChanges = await (_categoryDao.select(_categoryDao.categoryTable)
          ..where((t) => (t.syncStatus.equals(SyncStatus.synced.name)).not() & t.userId.equals(_userId)))
        .get();

    final localChangesMap = {for (var c in allLocalChanges) c.id: c};

    await _categoryDao.db.transaction(() async {
      for (final serverChange in serverChanges) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (serverChange.userId != _userId) continue;

        final localRecord = await (_categoryDao.select(_categoryDao.categoryTable)
              ..where((t) => t.id.equals(serverChange.id.toString())))
            .getSingleOrNull();

        if (localRecord == null) {
          // –ó–∞–ø–∏—Å–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ, —Å–æ–∑–¥–∞–µ–º –µ–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
          await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
                serverChange.toCompanion(SyncStatus.synced),
              );
          print('    -> –°–û–ó–î–ê–ù–û —Å —Å–µ—Ä–≤–µ—Ä–∞: "${serverChange.title}"');
          continue;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (localRecord.syncStatus == SyncStatus.local || localRecord.syncStatus == SyncStatus.deleted) {
          // –†–ê–ó–†–ï–®–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–ê –ü–û –í–†–ï–ú–ï–ù–ò
          final serverTime = serverChange.lastModified ?? DateTime.fromMicrosecondsSinceEpoch(0);
          final localTime = localRecord.lastModified;
          
          if (serverTime.isAfter(localTime)) {
            // –°–µ—Ä–≤–µ—Ä –Ω–æ–≤–µ–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            print('    -> –ö–û–ù–§–õ–ò–ö–¢: –°–µ—Ä–≤–µ—Ä –Ω–æ–≤–µ–µ –¥–ª—è "${serverChange.title}". –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.');
            await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
                  serverChange.toCompanion(SyncStatus.synced),
                );
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É - –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É —Å–µ—Ä–≤–µ—Ä–∞
            localChangesMap.remove(localRecord.id);
          } else {
            // –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ –∏–ª–∏ –≤—Ä–µ–º—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ - –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            print('    -> –ö–û–ù–§–õ–ò–ö–¢: –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ –¥–ª—è "${localRecord.title}". –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
            // –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ localChangesMap
          }
        } else {
          // –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
          await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
              serverChange.toCompanion(SyncStatus.synced),
            );
          print('    -> –û–ë–ù–û–í–õ–ï–ù–û —Å —Å–µ—Ä–≤–µ—Ä–∞: "${serverChange.title}"');
        }
      }
    });

    return localChangesMap.values.toList();
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ —Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ "–≤—ã–∏–≥—Ä–∞–ª–∏" —Å–ª–∏—è–Ω–∏–µ.
  Future<void> _pushLocalChanges(List<CategoryTableData> changesToPush) async {
    for (final localChange in changesToPush) {
      if (localChange.syncStatus == SyncStatus.deleted) {
        try {
          await _syncDeleteToServer(localChange.id);
          // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º "–Ω–∞–¥–≥—Ä–æ–±–∏–µ" –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
          await _categoryDao.physicallyDeleteCategory(localChange.id, userId: _userId);
          print('    -> ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ "${localChange.id}" —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        } catch (e) {
          print('    -> ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ ID: ${localChange.id}. –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ.');
        }
      } else if (localChange.syncStatus == SyncStatus.local) {
        try {
          final entity = localChange.toModel().toEntity();
          
          final serverRecord = await _remoteDataSource.getCategoryById(
            serverpod.UuidValue.fromString(entity.id),
          );

          if (serverRecord != null) {
            await _syncUpdateToServer(entity);
          } else {
            await _syncCreateToServer(entity);
          }
          print('    -> ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ "${localChange.title}" —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        } catch (e) {
          print('    -> ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ ID: ${localChange.id}. –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ.');
        }
      }
    }
  }
  
  // --- CRUD –û–ü–ï–†–ê–¶–ò–ò (–≤—ã–∑—ã–≤–∞—é—Ç syncWithServer) ---
  @override
  Stream<List<CategoryEntity>> watchCategories() {
    return _localDataSource.watchCategories(userId: _userId).map((models) => models.toEntities());
  }

  @override
  Future<String> createCategory(CategoryEntity category) async {
    final categoryWithUser = category.copyWith(userId: _userId);
    final companion = categoryWithUser.toModel().toCompanion().copyWith(
          syncStatus: const Value(SyncStatus.local),
        );
    await _categoryDao.createCategory(companion);
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    syncWithServer().catchError((e) {
      print('‚ö†Ô∏è –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: $e');
    });
    return categoryWithUser.id;
  }

  @override
  Future<bool> updateCategory(CategoryEntity category) async {
    final categoryWithUser = category.copyWith(
      userId: _userId,
      lastModified: DateTime.now().toUtc(), // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    );
    final companion = categoryWithUser.toModel().toCompanion().copyWith(
          syncStatus: const Value(SyncStatus.local),
        );
    final result = await _categoryDao.updateCategory(companion, userId: _userId);
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    syncWithServer().catchError((e) {
      print('‚ö†Ô∏è –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: $e');
    });
    return result;
  }

  @override
  Future<bool> deleteCategory(String id) async {
    final result = await _categoryDao.softDeleteCategory(id, userId: _userId);
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    syncWithServer().catchError((e) {
      print('‚ö†Ô∏è –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: $e');
    });
    return result;
  }

  void _initEventBasedSync() {
    if (_isDisposed) return;
    print('üåä CategoryRepositoryImpl: _initEventBasedSync –¥–ª—è userId: $_userId. –ü–æ–ø—ã—Ç–∫–∞ #${_reconnectionAttempt + 1}');
    _eventStreamSubscription?.cancel();
    if (_reconnectionAttempt == 0) {
      print('‚è±Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π WebSocket –¥–ª—è userId: $_userId...');
      Future.delayed(const Duration(seconds: 2), () {
        if (_isDisposed) return;
        _subscribeToEvents();
      });
    } else {
      _subscribeToEvents();
    }
  }

  void _subscribeToEvents() {
    if (_isDisposed) return;
    print('üéß CategoryRepositoryImpl: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è userId: $_userId (–ø–æ–ø—ã—Ç–∫–∞: ${_reconnectionAttempt})');
    _eventStreamSubscription = _remoteDataSource.watchEvents().listen(
      (event) {
        print('‚ö°Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${event.type.name} (–¥–ª—è userId: $_userId)');
        if (_reconnectionAttempt > 0) {
          print('üëç –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å real-time —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è userId: $_userId!');
          _reconnectionAttempt = 0;
        }
        _handleSyncEvent(event);
      },
      onError: (error) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è userId: $_userId: $error. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        _scheduleReconnection();
      },
      onDone: () {
        print('üîå –°—Ç—Ä–∏–º —Å–æ–±—ã—Ç–∏–π –±—ã–ª –∑–∞–∫—Ä—ã—Ç (onDone) –¥–ª—è userId: $_userId. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        _scheduleReconnection();
      },
      cancelOnError: true,
    );
  }

  void _scheduleReconnection() {
    if (_isDisposed) return;
    _eventStreamSubscription?.cancel();
    if (_reconnectionAttempt >= _maxReconnectionAttempts) {
      print('üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ($_maxReconnectionAttempts). –ü–æ–ø—ã—Ç–∫–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã.');
      return;
    }
    final delaySeconds = min(pow(2, _reconnectionAttempt).toInt(), 20);
    print('‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ $delaySeconds —Å–µ–∫—É–Ω–¥.');
    Future.delayed(Duration(seconds: delaySeconds), () {
      _reconnectionAttempt++;
      _initEventBasedSync();
    });
  }

  Future<void> _handleSyncEvent(serverpod.CategorySyncEvent event) async {
    switch (event.type) {
      case serverpod.SyncEventType.create:
        if (event.category != null && event.category!.userId == _userId) {
          await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
                event.category!.toCompanion(SyncStatus.synced),
              );
          print('  -> (Real-time) –°–û–ó–î–ê–ù–ê: "${event.category!.title}"');
        }
        break;
      case serverpod.SyncEventType.update:
        if (event.category != null && event.category!.userId == _userId) {
          final localCopy = await (_categoryDao.select(_categoryDao.categoryTable)..where((t) => t.id.equals(event.category!.id.toString()))).getSingleOrNull();
          if (localCopy != null) {
            if (localCopy.syncStatus == SyncStatus.local) {
              final serverLastModified = event.category!.lastModified;
              if (serverLastModified != null) {
                if (serverLastModified.isAfter(localCopy.lastModified)) {
                  await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
                        event.category!.toCompanion(SyncStatus.synced),
                      );
                  print('  -> (Real-time) –ö–û–ù–§–õ–ò–ö–¢ –†–ê–ó–†–ï–®–ï–ù (—Å–µ—Ä–≤–µ—Ä –Ω–æ–≤–µ–µ): "${event.category!.title}"');
                } else {
                  print('  -> (Real-time) –ö–û–ù–§–õ–ò–ö–¢ (–ª–æ–∫–∞–ª—å–Ω–æ –Ω–æ–≤–µ–µ): "${localCopy.title}". –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.');
                }
              } else {
                print('  -> (Real-time) –ö–û–ù–§–õ–ò–¢–ö (—Å–µ—Ä–≤–µ—Ä –±–µ–∑ lastModified): "${localCopy.title}". –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.');
              }
            } else {
              await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
                    event.category!.toCompanion(SyncStatus.synced),
                  );
              print('  -> (Real-time) –û–ë–ù–û–í–õ–ï–ù–ê: "${event.category!.title}"');
            }
          } else if (event.category != null) {
            await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
                  event.category!.toCompanion(SyncStatus.synced),
                );
            print('  -> (Real-time) UPDATE –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–∫–∞–ª—å–Ω–æ. –°–û–ó–î–ê–ù–ê: "${event.category!.title}"');
          }
        }
        break;
      case serverpod.SyncEventType.delete:
        if (event.id != null) {
          final localRecord = await (_categoryDao.select(_categoryDao.categoryTable)..where((t) => t.id.equals(event.id!.toString()))).getSingleOrNull();
          if (localRecord?.userId == _userId) {
            await _categoryDao.physicallyDeleteCategory(event.id!.toString(), userId: _userId);
            print('  -> (Real-time) –£–î–ê–õ–ï–ù–ê ID: "${event.id}"');
          }
        }
        break;
    }
  }

  @override
  void dispose() {
    print('üõë CategoryRepositoryImpl: –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è userId: $_userId. _isDisposed –¥–æ –≤—ã–∑–æ–≤–∞: $_isDisposed');
    _isDisposed = true;
    _eventStreamSubscription?.cancel();
    print('üõë CategoryRepositoryImpl: –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è userId: $_userId –£–°–ü–ï–®–ù–û –£–ù–ò–ß–¢–û–ñ–ï–ù. _isDisposed –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞: $_isDisposed');
  }

  @override
  Future<List<CategoryEntity>> getCategories() async {
    return _localDataSource.getCategories(userId: _userId).then((models) => models.toEntities());
  }

  @override
  Future<CategoryEntity?> getCategoryById(String id) async {
    try {
      return _localDataSource.getCategoryById(id, userId: _userId).then((model) => model.toEntity());
    } catch (e) {
      return null;
    }
  }

  Future<void> _syncCreateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      final syncedCategory = await _remoteDataSource.createCategory(serverCategory);
      await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
            syncedCategory.toCompanion(SyncStatus.synced),
          );
      print('    -> ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch (e) {
      print('    -> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è "${category.title}": $e');
      rethrow;
    }
  }

  Future<void> _syncUpdateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      await _remoteDataSource.updateCategory(serverCategory);
      await _categoryDao.db.into(_categoryDao.categoryTable).insertOnConflictUpdate(
            serverCategory.toCompanion(SyncStatus.synced),
          );
      print('    -> ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch (e) {
      print('    -> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è "${category.title}": $e');
      rethrow;
    }
  }

  Future<void> _syncDeleteToServer(String id) async {
    try {
      await _remoteDataSource.deleteCategory(serverpod.UuidValue.fromString(id));
      print('    -> ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ "$id" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch (e) {
      print('    -> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è "$id": $e');
      rethrow;
    }
  }
}

// --- –†–ê–°–®–ò–†–ï–ù–ò–Ø ---
extension on CategoryEntity {
  serverpod.Category toServerpodCategory() => serverpod.Category(
        id: serverpod.UuidValue.fromString(id),
        title: title,
        lastModified: lastModified,
        userId: userId,
      );
}

extension on serverpod.Category {
  CategoryTableCompanion toCompanion(SyncStatus status) => CategoryTableCompanion(
        id: Value(id.toString()),
        title: Value(title),
        lastModified: Value(lastModified ?? DateTime.now().toUtc()),
        userId: Value(userId),
        syncStatus: Value(status),
      );
}