import 'dart:async';
import 'package:sync1_client/sync1_client.dart' as serverpod;
import '../datasources/local/interfaces/category_local_datasource_service.dart';
import '../datasources/remote/interfaces/category_remote_datasource_service.dart';
import '../models/extensions/category_model_extension.dart';
import '../../domain/entities/extensions/category_entity_extension.dart';
import '../../domain/entities/category/category.dart';
import '../../domain/repositories/category_repository.dart';

/// Offline-first Repository –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
/// –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º (Drift) –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–º (Serverpod) –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
class CategoryRepositoryImpl implements ICategoryRepository {
  final ICategoryLocalDataSource _localDataSource;
  final ICategoryRemoteDataSource _remoteDataSource;

  CategoryRepositoryImpl(
    this._localDataSource,
    this._remoteDataSource,
  );

  @override
  Future<List<CategoryEntity>> getCategories() async {
    try {
      // Offline-first: –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      final localCategories = await _localDataSource.getCategories();
      return localCategories.toEntities();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
      rethrow;
    }
  }

  @override
  Stream<List<CategoryEntity>> watchCategories() {
    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ - –≤—Å–µ–≥–¥–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
    return _localDataSource.watchCategories().map(
      (models) => models.toEntities(),
    );
  }

  @override
  Future<CategoryEntity> getCategoryById(String id) async {
    try {
      final model = await _localDataSource.getCategoryById(id);
      return model.toEntity();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID $id: $e');
      rethrow;
    }
  }

  @override
Future<String> createCategory(CategoryEntity category) async {
  print('üîµ Repository: –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ª–æ–∫–∞–ª—å–Ω–æ: ${category.title}');
  
  // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
  final localId = await _localDataSource.createCategory(category.toModel());
  print('‚úÖ Repository: –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: $localId');
  
  // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  print('üåê Repository: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
  _syncCreateToServer(category).then((_) {
    print('‚úÖ Repository: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  }).catchError((error) {
    print('‚ùå Repository: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $error');
  });
  
  return localId;
}

  @override
  Future<bool> updateCategory(CategoryEntity category) async {
    // 1. –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    final localResult = await _localDataSource.updateCategory(category.toModel());
    
    // 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    _syncUpdateToServer(category).catchError((error) {
      print('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $error');
    });
    
    return localResult;
  }

  @override
  Future<bool> deleteCategory(String id) async {
    // 1. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    final localResult = await _localDataSource.deleteCategory(id);
    
    // 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    _syncDeleteToServer(id).catchError((error) {
      print('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $error');
    });
    
    return localResult;
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  Future<void> _syncCreateToServer(CategoryEntity category) async {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Serverpod –º–æ–¥–µ–ª—å
      final serverpodCategory = serverpod.Category(
        id: serverpod.UuidValue.fromString(category.id),
        title: category.title,
      );
      
      await _remoteDataSource.createCategory(serverpodCategory);
      print('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${category.title}');
    } catch (e) {
      print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
      rethrow;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  Future<void> _syncUpdateToServer(CategoryEntity category) async {
    try {
      final serverpodCategory = serverpod.Category(
        id: serverpod.UuidValue.fromString(category.id),
        title: category.title,
      );
      
      await _remoteDataSource.updateCategory(serverpodCategory);
      print('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${category.title}');
    } catch (e) {
      print('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
      rethrow;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  Future<void> _syncDeleteToServer(String id) async {
    try {
      final uuidValue = serverpod.UuidValue.fromString(id);
      await _remoteDataSource.deleteCategory(uuidValue);
      print('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $id');
    } catch (e) {
      print('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
      rethrow;
    }
  }

   Future<void> syncWithServer() async {
    try {
      print('–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      final serverCategories = await _remoteDataSource.getCategories();
      
      // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      final localCategories = await _localDataSource.getCategories();

      // 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –≤ –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID
      final serverMap = {for (var cat in serverCategories) cat.id.toString(): cat};
      final localMap = {for (var cat in localCategories) cat.id: cat};

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
      for (final serverCategory in serverCategories) {
        final serverCatId = serverCategory.id.toString();
        final localCategory = localMap[serverCatId];

        final categoryToUpsert = CategoryEntity(
          id: serverCatId,
          title: serverCategory.title
        ).toModel();

        if (localCategory == null) {
          // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ -> –¥–æ–±–∞–≤–ª—è–µ–º
          print('Sync: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞: ${categoryToUpsert.title}');
          await _localDataSource.createCategory(categoryToUpsert);
        } else if (localCategory.title != serverCategory.title) {
          // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å –∏ —Ç–∞–º, –∏ —Ç–∞–º, –Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è -> –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é
           print('Sync: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞: ${categoryToUpsert.title}');
          await _localDataSource.updateCategory(categoryToUpsert);
        }
      }

      // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      for (final localCategory in localCategories) {
        if (!serverMap.containsKey(localCategory.id)) {
           print('Sync: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–æ–≤—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${localCategory.title}');
          await _syncCreateToServer(localCategory.toEntity());
        }
      }

      print('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: $e');
      rethrow;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
  Future<bool> isServerAvailable() async {
    try {
      return await _remoteDataSource.checkConnection();
    } catch (e) {
      return false;
    }
  }

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  /// –í production —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏–ª–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  Stream<List<CategoryEntity>> watchServerChanges() async* {
    try {
      await for (final serverCategories in _remoteDataSource.watchCategories()) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Serverpod –º–æ–¥–µ–ª–∏ –≤ Entity
        final entities = serverCategories.map((serverpodCategory) => 
          CategoryEntity(
            id: serverpodCategory.id!.toString(),
            title: serverpodCategory.title,
          )
        ).toList();
        
        yield entities;
        
        // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        // —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞: $e');
    }
  }
}