// lib/features/home/data/repositories/category_repository_impl.dart

import 'dart:async';
import 'dart:math';
import 'package:drift/drift.dart';
import 'package:sync1_client/sync1_client.dart' as serverpod;

import '../../../../core/database/local/database.dart';
import '../../domain/entities/category/category.dart';
import '../../domain/entities/extensions/category_entity_extension.dart';
import '../../domain/repositories/category_repository.dart';
import '../datasources/local/dao/category/category_dao.dart';
import '../datasources/local/dao/category/sync_metadata_dao.dart';
import '../datasources/local/interfaces/category_local_datasource_service.dart';
import '../datasources/local/sources/category_local_data_source.dart';
import '../datasources/local/tables/category_table.dart';
import '../datasources/local/tables/extensions/category_table_extension.dart';
import '../datasources/remote/interfaces/category_remote_datasource_service.dart';
import '../datasources/remote/sources/category_remote_data_source.dart';
import '../models/extensions/category_model_extension.dart';

class CategoryRepositoryImpl implements ICategoryRepository {
  static const String _entityType = 'categories';

  final ICategoryLocalDataSource _localDataSource;
  final ICategoryRemoteDataSource _remoteDataSource;
  final SyncMetadataDao _syncMetadataDao;
  final CategoryDao _categoryDao;

  StreamSubscription? _serverStreamSubscription;
  // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–ª–∞–≥ _isSyncing —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–∞—Ç—å –æ—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
  bool _isSyncing = false;
  
  bool _isDisposed = false;
  int _reconnectionAttempt = 0;

  CategoryRepositoryImpl(
    this._localDataSource,
    this._remoteDataSource,
    this._syncMetadataDao,
  ) : _categoryDao = (_localDataSource as CategoryLocalDataSource).categoryDao {
    _initServerSync();
  }

  void _initServerSync() {
    if (_isDisposed) return;
    
    print('üåä –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É stream... (–ø–æ–ø—ã—Ç–∫–∞ #${_reconnectionAttempt + 1})');
    _serverStreamSubscription?.cancel();

    _serverStreamSubscription = _remoteDataSource.watchCategories().listen(
      (serverCategories) {
        print('‚úÖ Stream —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ.');
        if (_reconnectionAttempt > 0) {
           print('üëç –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å real-time —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        }
        _reconnectionAttempt = 0;
        // –ò–ó–ú–ï–ù–ï–ù–ò–ï: Stream —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        _performDifferentialSync(serverCategories);
      },
      onError: (error) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞: $error. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        _scheduleReconnection();
      },
      onDone: () {
        print('üîå –°–µ—Ä–≤–µ—Ä–Ω—ã–π stream –±—ã–ª –∑–∞–∫—Ä—ã—Ç (onDone). –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        _scheduleReconnection();
      },
      cancelOnError: true,
    );
  }

  void _scheduleReconnection() {
    if (_isDisposed) return;
    _serverStreamSubscription?.cancel();
    final delaySeconds = min(pow(2, _reconnectionAttempt), 60).toInt();
    print('‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ $delaySeconds —Å–µ–∫—É–Ω–¥.');

    Future.delayed(Duration(seconds: delaySeconds), () {
       _reconnectionAttempt++;
      _initServerSync();
    });
  }

  @override
  void dispose() {
    print('üõë –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ CategoryRepositoryImpl. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏.');
    _isDisposed = true;
    _serverStreamSubscription?.cancel();
  }
  
  // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞–ª–∞ —É–º–Ω–µ–µ.
  Future<void> _performDifferentialSync(List<serverpod.Category> serverCategories) async {
    if (_isSyncing) {
        print('‚ÑπÔ∏è –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫.');
        return;
    }
    _isSyncing = true;
    print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (${serverCategories.length} –∑–∞–ø–∏—Å–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞)');

    try {
      final localCategories = await _categoryDao.getCategories();
      final serverCategoriesMap = {for (var c in serverCategories) c.id.toString(): c};
      final localCategoriesMap = {for (var c in localCategories) c.id: c};

      await _categoryDao.db.transaction(() async {
        // --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –£–î–ê–õ–ï–ù–ò–Ø ---
        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å 'synced' –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
        // –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –Ω–æ–≤—ã–µ, –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ç—É—Å 'local') –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è.
        final recordsToDelete = localCategoriesMap.values
            .where((localCat) =>
                !serverCategoriesMap.containsKey(localCat.id) &&
                localCat.syncStatus == SyncStatus.synced)
            .map((localCat) => localCat.id)
            .toList();

        for (final id in recordsToDelete) {
          await _categoryDao.deleteCategory(id);
          print('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å (—Ç.–∫. —É–¥–∞–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ): $id');
        }

        for (final serverCategory in serverCategories) {
          final localCategory = localCategoriesMap[serverCategory.id.toString()];

          if (localCategory == null) {
            await _insertServerCategory(serverCategory);
            print('‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverCategory.title}');
          } else {
            // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, –æ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–¥–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.
            await _resolveConflict(localCategory, serverCategory);
          }
        }
        
        await _syncMetadataDao.updateLastSyncTimestamp(_entityType, DateTime.now().toUtc());
      });
      print('‚úÖ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e, stackTrace) {
      print('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–§–§. –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: $e\n$stackTrace');
    } finally {
      _isSyncing = false;
    }
  }
  
  Future<void> _insertServerCategory(serverpod.Category serverCategory) async {
    final companion = serverCategory.toCompanion(SyncStatus.synced);
    await _categoryDao.db.into(_categoryDao.categoryTable).insert(companion);
  }
  
  Future<void> _resolveConflict(CategoryTableData local, serverpod.Category server) async {
    if (local.syncStatus == SyncStatus.local) {
      print('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å "${local.title}". –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.');
      return;
    }
    
    final serverMillis = server.lastModified?.millisecondsSinceEpoch ?? 0;
    final localMillis = local.lastModified.millisecondsSinceEpoch;

    if (serverMillis > localMillis) {
      await _categoryDao.updateCategory(server.toCompanion(SyncStatus.synced));
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: ${server.title}');
    }
  }

  @override
  Stream<List<CategoryEntity>> watchCategories() {
    return _localDataSource.watchCategories().map((models) => models.toEntities());
  }

  @override
  Future<String> createCategory(CategoryEntity category) async {
    final companion = category.toModel().toCompanion().copyWith(syncStatus: const Value(SyncStatus.local));
    await _categoryDao.createCategory(companion);
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    _syncCreateToServer(category).catchError((e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ): $e');
      // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú—ã –Ω–µ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç.–∫. –∑–∞–ø–∏—Å—å —É–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
      // –∏ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.
    });
    return category.id;
  }

  @override
  Future<bool> updateCategory(CategoryEntity category) async {
    final companion = category.toModel().toCompanion().copyWith(syncStatus: const Value(SyncStatus.local));
    final result = await _categoryDao.updateCategory(companion);
    _syncUpdateToServer(category).catchError((e) => print('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ): $e'));
    return result;
  }

  @override
  Future<bool> deleteCategory(String id) async {
    final result = await _categoryDao.deleteCategory(id);
    _syncDeleteToServer(id).catchError((e) => print('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ): $e'));
    return result;
  }

  Future<void> _syncCreateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      final syncedCategory = await _remoteDataSource.createCategory(serverCategory);
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å, —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å synced
      await _categoryDao.updateCategory(syncedCategory.toCompanion(SyncStatus.synced));
      print('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch(e) {
       print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ "${category.title}". –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: $e');
    }
  }

  Future<void> _syncUpdateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      await _remoteDataSource.updateCategory(serverCategory);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      await _categoryDao.updateCategory(serverCategory.toCompanion(SyncStatus.synced));
      print('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch(e) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${category.title}". –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: $e');
    }
  }

  Future<void> _syncDeleteToServer(String id) async {
     try {
        await _remoteDataSource.deleteCategory(serverpod.UuidValue.fromString(id));
        print('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ "$id" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
     } catch(e) {
       // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç —Å–µ—Ç–∏),
       // –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –¥–∏—Ñ. —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
       // –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
       print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ "$id". –û—à–∏–±–∫–∞: $e');
     }
  }

  // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä—É—á–Ω–æ–π/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
  @override
  Future<void> syncWithServer() async {
    if (_isSyncing) {
        print('‚ÑπÔ∏è –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫.');
        return;
    }
    _isSyncing = true;
    print('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    try {
      // –®–ê–ì 1: –°–ù–ê–ß–ê–õ–ê –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
      // –≠—Ç–æ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π —à–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö.
      await _syncLocalChangesToServer();

      // –®–ê–ì 2: –ü–û–°–õ–ï —ç—Ç–æ–≥–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞.
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π _performDifferentialSync, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏ stream.
      // –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π —Å–ª–µ–ø–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞.
      print('üïí –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏...');
      final allServerCategories = await _remoteDataSource.getCategories();
      await _performDifferentialSync(allServerCategories);

      print('‚úÖ –†—É—á–Ω–∞—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      rethrow; // –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã SyncController –º–æ–≥ —ç—Ç–æ —É–≤–∏–¥–µ—Ç—å
    } finally {
      _isSyncing = false;
    }
  }

  Future<List<serverpod.Category>> _getServerChangesSince(DateTime? since) async {
    return await (_remoteDataSource as CategoryRemoteDataSource).getCategoriesSince(since);
  }  

  Future<void> _syncLocalChangesToServer() async {
    final localChanges = await (_categoryDao.select(_categoryDao.categoryTable)
          ..where((t) => t.syncStatus.equals(SyncStatus.local.name)))
        .get();
        
    if (localChanges.isEmpty) {
      print('üì§ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç.');
      return;
    }
    
    print('üì§ –ù–∞–π–¥–µ–Ω—ã ${localChanges.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');

    for (final localChange in localChanges) {
      final entity = localChange.toModel().toEntity();
      print('  -> –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å: "${entity.title}" (ID: ${entity.id})');
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å, —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∏–µ)
        // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º getCategoryById, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤—ã–∑—ã–≤–∞—Ç—å create –∏–ª–∏ update.
        final serverRecord = await _remoteDataSource.getCategoryById(serverpod.UuidValue.fromString(entity.id));
        
        if (serverRecord != null) {
          print('    -- –ó–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±–Ω–æ–≤–ª—è–µ–º...');
          await _syncUpdateToServer(entity);
        } else {
          print('    -- –ó–∞–ø–∏—Å—å –Ω–æ–≤–∞—è. –°–æ–∑–¥–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
          await _syncCreateToServer(entity);
        }
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ ${localChange.id}: $e');
        // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      }
    }
     print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  }

  @override
  Future<List<CategoryEntity>> getCategories() async => _localDataSource.getCategories().then((models) => models.toEntities());

  @override
  Future<CategoryEntity> getCategoryById(String id) async => _localDataSource.getCategoryById(id).then((model) => model.toEntity());
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
extension on CategoryEntity {
  serverpod.Category toServerpodCategory() => serverpod.Category(
        id: serverpod.UuidValue.fromString(id),
        title: title,
        lastModified: lastModified,
      );
}

extension on serverpod.Category {
  CategoryTableCompanion toCompanion(SyncStatus status) => CategoryTableCompanion(
        id: Value(id.toString()),
        title: Value(title),
        lastModified: Value(lastModified ?? DateTime.now()),
        syncStatus: Value(status),
      );
}