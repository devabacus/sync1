// lib/features/home/data/repositories/category_repository_impl.dart

import 'dart:async';

import 'package:drift/drift.dart';
import 'package:sync1/features/home/data/datasources/local/tables/extensions/category_table_extension.dart';
import 'package:sync1_client/sync1_client.dart' as serverpod;

import '../../../../core/database/local/database.dart';
import '../../domain/entities/category/category.dart';
import '../../domain/entities/extensions/category_entity_extension.dart';
import '../../domain/repositories/category_repository.dart';
import '../datasources/local/dao/category/category_dao.dart';
import '../datasources/local/dao/category/sync_metadata_dao.dart';
import '../datasources/local/interfaces/category_local_datasource_service.dart';
import '../datasources/local/sources/category_local_data_source.dart';
import '../datasources/local/tables/category_table.dart';
import '../datasources/remote/interfaces/category_remote_datasource_service.dart';
import '../models/extensions/category_model_extension.dart';

/// Offline-first Repository –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
class CategoryRepositoryImpl implements ICategoryRepository {
  static const String _entityType = 'categories';

  final ICategoryLocalDataSource _localDataSource;
  final ICategoryRemoteDataSource _remoteDataSource;
  final SyncMetadataDao _syncMetadataDao;
  StreamSubscription? _serverStreamSubscription;

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ DAO –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏
  final CategoryDao _categoryDao;

  CategoryRepositoryImpl(
    this._localDataSource,
    this._remoteDataSource,
    this._syncMetadataDao,
  ) : _categoryDao = (_localDataSource as CategoryLocalDataSource).categoryDao {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    _initServerSync();
  }

  void _initServerSync() {
    if (_serverStreamSubscription != null) return;
    _serverStreamSubscription = _remoteDataSource.watchCategories().listen(
      (serverCategories) => _performDifferentialSync(serverCategories),
      onError: (error) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞: $error');
      },
    );
  }

  /// –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  Future<void> _performDifferentialSync(
    List<serverpod.Category> serverCategories,
  ) async {
    try {
      print(
        'üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (${serverCategories.length} –∑–∞–ø–∏—Å–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞)',
      );

      await _categoryDao.db.transaction(() async {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ ID
        final localCategories = await _categoryDao.getCategories();
        final localIds = localCategories.map((c) => c.id).toSet();
        final serverIds = serverCategories.map((c) => c.id.toString()).toSet();
        
        // –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        final deletedIds = localIds.difference(serverIds);
        
        // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        for (final deletedId in deletedIds) {
          await _categoryDao.deleteCategory(deletedId);
          print('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: $deletedId');
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        for (final serverCategory in serverCategories) {
          await _processSingleCategoryUpdate(serverCategory);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await _syncMetadataDao.updateLastSyncTimestamp(
          _entityType,
          DateTime.now().toUtc(),
        );
      });

      print('‚úÖ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

 /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
Future<void> _processSingleCategoryUpdate(serverpod.Category serverCategory) async {
  final categoryId = serverCategory.id.toString();
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
  CategoryTableData? localCategory;
  try {
    localCategory = await _categoryDao.getCategoryById(categoryId);
  } catch (e) {
    localCategory = null;
  }

  if (localCategory == null) {
    // –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞ - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
    await _insertServerCategory(serverCategory);
    print('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${serverCategory.title}');
  } else {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å - –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç
    await _resolveConflict(localCategory, serverCategory);
  }
}

  /// –í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
Future<void> _insertServerCategory(serverpod.Category serverCategory) async {
  final companion = CategoryTableCompanion.insert(
    id: Value(serverCategory.id.toString()),
    title: serverCategory.title,
    lastModified: serverCategory.lastModified ?? DateTime.now().toUtc(),
    syncStatus: SyncStatus.synced,
  );

  await _categoryDao.db.into(_categoryDao.categoryTable).insert(companion);
}

  /// –†–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –∑–∞–ø–∏—Å—å—é
Future<void> _resolveConflict(
  CategoryTableData localCategory,
  serverpod.Category serverCategory,
) async {
  final serverTime = serverCategory.lastModified ?? DateTime.now().toUtc();
  final localTime = localCategory.lastModified;

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: "server wins" + —É—á–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  if (localCategory.syncStatus == SyncStatus.local) {
    // –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –∏ –µ—â–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    if (serverTime.isAfter(localTime)) {
      // –°–µ—Ä–≤–µ—Ä –Ω–æ–≤–µ–µ - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é, –Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç
      await _updateToServerVersion(
        localCategory.id,
        serverCategory,
        isConflict: true,
      );
      print('‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É —Å–µ—Ä–≤–µ—Ä–∞: ${serverCategory.title}');
    } else {
      // –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é, –Ω–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      print('üìù –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º: ${localCategory.title}');
      // –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      _retryLocalSync(localCategory);
    }
  } else {
    // –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    if (serverTime.isAfter(localTime)) {
      await _updateToServerVersion(localCategory.id, serverCategory);
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverCategory.title}');
    }
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞—Ä—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  }
}

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏
Future<void> _updateToServerVersion(
  String categoryId,
  serverpod.Category serverCategory, {
  bool isConflict = false,
}) async {
  final companion = CategoryTableCompanion(
    id: Value(categoryId),
    title: Value(serverCategory.title),
    lastModified: Value(serverCategory.lastModified ?? DateTime.now().toUtc()),
    syncStatus: Value(isConflict ? SyncStatus.conflict : SyncStatus.synced),
  );

  await _categoryDao.updateCategory(companion);
}

  /// –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
  Future<void> _retryLocalSync(CategoryTableData localCategory) async {
    try {
      final entity = localCategory.toModel().toEntity();
      await _syncUpdateToServer(entity);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  @override
  Stream<List<CategoryEntity>> watchCategories() {
    // UI —Å–ª—É—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
    return _localDataSource.watchCategories().map(
      (models) => models.toEntities(),
    );
  }

  @override
  Future<String> createCategory(CategoryEntity category) async {
    // 1. –ì–æ—Ç–æ–≤–∏–º Companion —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    final companion = CategoryTableCompanion.insert(
      id: Value(category.id),
      title: category.title,
      lastModified: category.lastModified,
      syncStatus: SyncStatus.local,
    );

    // 2. –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–∫–∞–ª—å–Ω–æ
    await _categoryDao.createCategory(companion);

    // 3. –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤ —Ñ–æ–Ω–µ
    _syncCreateToServer(category).catchError((error) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è: $error');
    });

    return category.id;
  }

  @override
  Future<bool> updateCategory(CategoryEntity category) async {
    // 1. –ì–æ—Ç–æ–≤–∏–º Companion —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    final companion = category.toModel().toCompanion().copyWith(
      lastModified: Value(category.lastModified),
      syncStatus: const Value(SyncStatus.local),
    );

    // 2. –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    final result = await _categoryDao.updateCategory(companion);

    // 3. –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤ —Ñ–æ–Ω–µ
    _syncUpdateToServer(category).catchError((error) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $error');
    });

    return result;
  }

  @override
  Future<bool> deleteCategory(String id) async {
    try {
      // –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
      final result = await _categoryDao.deleteCategory(id);

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      _syncDeleteToServer(id).catchError((error) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: $error');
      });

      return result;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      return false;
    }
  }

  @override
  Future<void> syncWithServer() async {
    try {
      print('üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      final lastSync = await _syncMetadataDao.getLastSyncTimestamp(_entityType);

      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      final serverCategories = await _getServerChangesSince(lastSync);

      if (serverCategories.isNotEmpty) {
        await _performDifferentialSync(serverCategories);
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      await _syncLocalChangesToServer();

      print('‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  Future<List<serverpod.Category>> _getServerChangesSince(
    DateTime? since,
  ) async {
    return await _remoteDataSource.getCategories();
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
Future<void> _syncLocalChangesToServer() async {
  final localChanges = await (_categoryDao.db.select(_categoryDao.categoryTable)
        ..where((t) => t.syncStatus.isIn([
          SyncStatus.local.name, 
          SyncStatus.conflict.name
        ])))
      .get();

  for (final localChange in localChanges) {
    try {
      final entity = localChange.toModel().toEntity();
      await _syncUpdateToServer(entity);
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await _categoryDao.updateCategory(CategoryTableCompanion(
        id: Value(localChange.id),
        syncStatus: const Value(SyncStatus.synced),
      ));
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ ${localChange.id}: $e');
    }
  }
}

  @override
  void dispose() {
    _serverStreamSubscription?.cancel();
    _serverStreamSubscription = null;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ, —á–µ—Ä–µ–∑ _localDataSource
  @override
  Future<List<CategoryEntity>> getCategories() async =>
      _localDataSource.getCategories().then((models) => models.toEntities());

  @override
  Future<CategoryEntity> getCategoryById(String id) async =>
      _localDataSource.getCategoryById(id).then((model) => model.toEntity());

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  Future<void> _syncCreateToServer(CategoryEntity category) async {
    final serverpodCategory = serverpod.Category(
      id: serverpod.UuidValue.fromString(category.id),
      title: category.title,
      lastModified: category.lastModified,
    );

    await _remoteDataSource.createCategory(serverpodCategory);
    print('üì§ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${category.title}');
  }

  Future<void> _syncUpdateToServer(CategoryEntity category) async {
    final serverpodCategory = serverpod.Category(
      id: serverpod.UuidValue.fromString(category.id),
      title: category.title,
      lastModified: category.lastModified,
    );

    await _remoteDataSource.updateCategory(serverpodCategory);
    print('üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${category.title}');
  }

  Future<void> _syncDeleteToServer(String id) async {
    await _remoteDataSource.deleteCategory(serverpod.UuidValue.fromString(id));
    print('üì§ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $id');
  }
}