// lib/features/home/data/repositories/category_repository_impl.dart

import 'dart:async';
import 'dart:math';
import 'package:drift/drift.dart';
import 'package:sync1_client/sync1_client.dart' as serverpod;

import '../../../../core/database/local/database.dart';
import '../../domain/entities/category/category.dart';
import '../../domain/entities/extensions/category_entity_extension.dart';
import '../../domain/repositories/category_repository.dart';
import '../datasources/local/dao/category/category_dao.dart';
import '../datasources/local/dao/category/sync_metadata_dao.dart';
import '../datasources/local/interfaces/category_local_datasource_service.dart';
import '../datasources/local/sources/category_local_data_source.dart';
import '../datasources/local/tables/category_table.dart';
import '../datasources/local/tables/extensions/category_table_extension.dart';
import '../datasources/remote/interfaces/category_remote_datasource_service.dart';
import '../datasources/remote/sources/category_remote_data_source.dart';
import '../models/extensions/category_model_extension.dart';

class CategoryRepositoryImpl implements ICategoryRepository {
  static const String _entityType = 'categories';

  final ICategoryLocalDataSource _localDataSource;
  final ICategoryRemoteDataSource _remoteDataSource;
  final SyncMetadataDao _syncMetadataDao;
  final CategoryDao _categoryDao;

  StreamSubscription? _serverStreamSubscription;
  bool _isSyncing = false;
  
  bool _isDisposed = false;
  int _reconnectionAttempt = 0;

  CategoryRepositoryImpl(
    this._localDataSource,
    this._remoteDataSource,
    this._syncMetadataDao,
  ) : _categoryDao = (_localDataSource as CategoryLocalDataSource).categoryDao {
    _initServerSync();
  }

  void _initServerSync() {
    if (_isDisposed) return;
    
    print('üåä –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É stream... (–ø–æ–ø—ã—Ç–∫–∞ #${_reconnectionAttempt + 1})');
    _serverStreamSubscription?.cancel();

    _serverStreamSubscription = _remoteDataSource.watchCategories().listen(
      (serverCategories) {
        print('‚úÖ Stream —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ.');
        if (_reconnectionAttempt > 0) {
           print('üëç –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å real-time —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        }
        _reconnectionAttempt = 0;
        _performDifferentialSync(serverCategories);
      },
      onError: (error) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞: $error. –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        _scheduleReconnection();
      },
      onDone: () {
        print('üîå –°–µ—Ä–≤–µ—Ä–Ω—ã–π stream –±—ã–ª –∑–∞–∫—Ä—ã—Ç (onDone). –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        _scheduleReconnection();
      },
      cancelOnError: true,
    );
  }

  void _scheduleReconnection() {
    if (_isDisposed) return;
    _serverStreamSubscription?.cancel();
    final delaySeconds = min(pow(2, _reconnectionAttempt), 60).toInt();
    print('‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ $delaySeconds —Å–µ–∫—É–Ω–¥.');

    Future.delayed(Duration(seconds: delaySeconds), () {
       _reconnectionAttempt++;
      _initServerSync();
    });
  }

  @override
  void dispose() {
    print('üõë –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ CategoryRepositoryImpl. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏.');
    _isDisposed = true;
    _serverStreamSubscription?.cancel();
  }
  
  // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> _performDifferentialSync(List<serverpod.Category> serverCategories) async {
    if (_isSyncing) {
        print('‚ÑπÔ∏è –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫.');
        return;
    }
    _isSyncing = true;
    try {
      // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
      await _applyServerState(serverCategories);
    } finally {
      _isSyncing = false;
    }
  }
  
  // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞
  Future<void> _applyServerState(List<serverpod.Category> serverCategories) async {
    print('‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ (${serverCategories.length} –∑–∞–ø–∏—Å–µ–π)...');
    try {
      final localCategories = await _categoryDao.getCategories();
      final serverCategoriesMap = {for (var c in serverCategories) c.id.toString(): c};
      final localCategoriesMap = {for (var c in localCategories) c.id: c};

      await _categoryDao.db.transaction(() async {
        final recordsToDelete = localCategoriesMap.values
            .where((localCat) =>
                !serverCategoriesMap.containsKey(localCat.id) &&
                localCat.syncStatus == SyncStatus.synced)
            .map((localCat) => localCat.id)
            .toList();

        if (recordsToDelete.isNotEmpty) {
          print('üóëÔ∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${recordsToDelete.length} –∑–∞–ø–∏—Å–µ–π, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
          for (final id in recordsToDelete) {
            await _categoryDao.deleteCategory(id);
          }
        }

        for (final serverCategory in serverCategories) {
          final localCategory = localCategoriesMap[serverCategory.id.toString()];

          if (localCategory == null) {
            await _insertServerCategory(serverCategory);
          } else {
            await _resolveConflict(localCategory, serverCategory);
          }
        }
        
        await _syncMetadataDao.updateLastSyncTimestamp(_entityType, DateTime.now().toUtc());
      });
      print('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ.');
    } catch (e, stackTrace) {
      print('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: $e\n$stackTrace');
    }
  }
  
  Future<void> _insertServerCategory(serverpod.Category serverCategory) async {
    print('‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverCategory.title}');
    final companion = serverCategory.toCompanion(SyncStatus.synced);
    await _categoryDao.db.into(_categoryDao.categoryTable).insert(companion);
  }
  
  Future<void> _resolveConflict(CategoryTableData local, serverpod.Category server) async {
    if (local.syncStatus == SyncStatus.local) {
      print('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å "${local.title}". –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.');
      return;
    }
    
    final serverMillis = server.lastModified?.millisecondsSinceEpoch ?? 0;
    final localMillis = local.lastModified.millisecondsSinceEpoch;

    if (serverMillis > localMillis) {
      print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: ${server.title}');
      await _categoryDao.updateCategory(server.toCompanion(SyncStatus.synced));
    }
  }

  @override
  Future<void> syncWithServer() async {
    if (_isSyncing) {
        print('‚ÑπÔ∏è –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫.');
        return;
    }
    _isSyncing = true;
    print('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    try {
      await _syncLocalChangesToServer();

      print('üïí –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏...');
      final allServerCategories = await _remoteDataSource.getCategories();
      
      // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥, –º–∏–Ω—É—è –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–ª–∞–≥–∞
      await _applyServerState(allServerCategories);

      print('‚úÖ –†—É—á–Ω–∞—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      rethrow;
    } finally {
      _isSyncing = false;
    }
  }

  // --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (CRUD, _syncLocalChangesToServer –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

  @override
  Stream<List<CategoryEntity>> watchCategories() {
    return _localDataSource.watchCategories().map((models) => models.toEntities());
  }

  @override
  Future<String> createCategory(CategoryEntity category) async {
    final companion = category.toModel().toCompanion().copyWith(syncStatus: const Value(SyncStatus.local));
    await _categoryDao.createCategory(companion);
    _syncCreateToServer(category).catchError((e) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ "${category.title}". –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: $e');
    });
    return category.id;
  }

  @override
  Future<bool> updateCategory(CategoryEntity category) async {
    final companion = category.toModel().toCompanion().copyWith(syncStatus: const Value(SyncStatus.local));
    final result = await _categoryDao.updateCategory(companion);
    _syncUpdateToServer(category).catchError((e) => print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${category.title}". –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: $e'));
    return result;
  }

  @override
  Future<bool> deleteCategory(String id) async {
    final result = await _categoryDao.deleteCategory(id);
    _syncDeleteToServer(id).catchError((e) => print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ "$id". –û—à–∏–±–∫–∞: $e'));
    return result;
  }

  Future<void> _syncCreateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      final syncedCategory = await _remoteDataSource.createCategory(serverCategory);
      await _categoryDao.updateCategory(syncedCategory.toCompanion(SyncStatus.synced));
      print('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch(e) {
       print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è "${category.title}": $e');
       rethrow;
    }
  }

  Future<void> _syncUpdateToServer(CategoryEntity category) async {
    try {
      final serverCategory = category.toServerpodCategory();
      await _remoteDataSource.updateCategory(serverCategory);
      await _categoryDao.updateCategory(serverCategory.toCompanion(SyncStatus.synced));
      print('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "${category.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
    } catch(e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è "${category.title}": $e');
      rethrow;
    }
  }

  Future<void> _syncDeleteToServer(String id) async {
     try {
        await _remoteDataSource.deleteCategory(serverpod.UuidValue.fromString(id));
        print('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ "$id" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.');
     } catch(e) {
       print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è "$id": $e');
       rethrow;
     }
  }

  Future<void> _syncLocalChangesToServer() async {
    final localChanges = await (_categoryDao.select(_categoryDao.categoryTable)
          ..where((t) => t.syncStatus.equals(SyncStatus.local.name)))
        .get();
        
    if (localChanges.isEmpty) {
      print('üì§ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç.');
      return;
    }
    
    print('üì§ –ù–∞–π–¥–µ–Ω—ã ${localChanges.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');

    for (final localChange in localChanges) {
      final entity = localChange.toModel().toEntity();
      print('  -> –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å: "${entity.title}" (ID: ${entity.id})');
      
      try {
        final serverRecord = await _remoteDataSource.getCategoryById(serverpod.UuidValue.fromString(entity.id));
        
        if (serverRecord != null) {
          await _syncUpdateToServer(entity);
        } else {
          await _syncCreateToServer(entity);
        }
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ ${localChange.id}: $e');
      }
    }
     print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  }

  @override
  Future<List<CategoryEntity>> getCategories() async => _localDataSource.getCategories().then((models) => models.toEntities());

  @override
  Future<CategoryEntity> getCategoryById(String id) async => _localDataSource.getCategoryById(id).then((model) => model.toEntity());
}

extension on CategoryEntity {
  serverpod.Category toServerpodCategory() => serverpod.Category(
        id: serverpod.UuidValue.fromString(id),
        title: title,
        lastModified: lastModified,
      );
}

extension on serverpod.Category {
  CategoryTableCompanion toCompanion(SyncStatus status) => CategoryTableCompanion(
        id: Value(id.toString()),
        title: Value(title),
        lastModified: Value(lastModified ?? DateTime.now()),
        syncStatus: Value(status),
      );
}