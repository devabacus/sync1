import 'dart:async';
import 'package:sync1_client/sync1_client.dart';
import '../interfaces/category_remote_datasource_service.dart';

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —á–µ—Ä–µ–∑ Serverpod —Å–µ—Ä–≤–µ—Ä
class CategoryRemoteDataSource implements ICategoryRemoteDataSource {
  final Client _client;

  // Subscription –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è streaming –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
  StreamSubscription<List<Category>>? _streamSubscription;
  StreamController<List<Category>>? _categoriesStreamController;

  CategoryRemoteDataSource(this._client);

  @override
  Future<List<Category>> getCategories() async {
    try {
      final categories = await _client.category.getCategories();
      return categories;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
      rethrow;
    }
  }

  @override
  Future<List<Category>> getCategoriesSince(DateTime? since) async {
    try {
      // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ Serverpod
      final categories = await _client.category.getCategoriesSince(since);
      return categories;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π c $since: $e');
      rethrow;
    }
  }

  @override
  Future<Category?> getCategoryById(UuidValue id) async {
    try {
      final category = await _client.category.getCategoryById(id);
      return category;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID $id: $e');
      rethrow;
    }
  }

  @override
  Future<Category> createCategory(Category category) async {
    print('üöÄ Remote: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${category.title}');
    print('üöÄ Remote: Server URL: ${_client.host}'); // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL

    try {
      final result = await _client.category.createCategory(category);
      print('‚úÖ Remote: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      return result;
    } catch (e) {
      print('‚ùå Remote: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: $e');
      rethrow;
    }
  }

  @override
  Future<bool> updateCategory(Category category) async {
    try {
      final result = await _client.category.updateCategory(category);
      return result;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      rethrow;
    }
  }

  @override
  Future<bool> deleteCategory(UuidValue id) async {
    try {
      final result = await _client.category.deleteCategory(id);
      return result;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $id: $e');
      rethrow;
    }
  }

  @override
Stream<CategorySyncEvent> watchEvents() {
  try {
    // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º stream –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ Serverpod
    return _client.category.watchEvents();
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞: $e');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π stream –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–∞–¥–∞–ª–æ
    return Stream.value(CategorySyncEvent(type: SyncEventType.create));
  }
}

  @override
  Future<bool> checkConnection() async {
    try {
      await _client.category.getCategories();
      return true;
    } catch (e) {
      print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: $e');
      return false;
    }
  }

  @override
  Future<List<Category>> syncCategories(List<Category> localCategories) async {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      final serverCategories = await getCategories();

      // 2. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ merge/conflict resolution
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ

      print(
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ª–æ–∫–∞–ª—å–Ω—ã—Ö ${localCategories.length}, —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö ${serverCategories.length}',
      );
      return serverCategories;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      return localCategories;
    }
  }

  @override
  Future<void> closeStreams() async {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ server stream
    await _streamSubscription?.cancel();
    _streamSubscription = null;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º broadcast stream controller
    if (_categoriesStreamController != null &&
        !_categoriesStreamController!.isClosed) {
      await _categoriesStreamController!.close();
      _categoriesStreamController = null;
    }

    print('Remote data source streams –∑–∞–∫—Ä—ã—Ç—ã');
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ dispose
  void dispose() {
    closeStreams();
  }

}
