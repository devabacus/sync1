// lib/features/home/presentation/providers/sync_controller_provider.dart

import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart'; // <-- 1. –ò–ú–ü–û–†–¢ –î–õ–Ø ProviderSubscription
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:serverpod_auth_client/serverpod_auth_client.dart'; // <-- 2. –Ø–í–ù–´–ô –ò–ú–ü–û–†–¢ –î–õ–Ø UserInfo
import '../../../../core/providers/session_manager_provider.dart';
import '../../data/providers/category/category_data_providers.dart';
import '../../data/repositories/category_repository_impl.dart';

part 'sync_controller_provider.g.dart';

@riverpod
class SyncController extends _$SyncController {
  StreamSubscription? _connectivitySubscription;
  ProviderSubscription? _authSubscription; // <-- 3. –ò–ó–ú–ï–ù–ï–ù –¢–ò–ü –ü–ï–†–ï–ú–ï–ù–ù–û–ô

  @override
  void build() {
    _connectivitySubscription = Connectivity().onConnectivityChanged.listen(_handleConnectivityChange);
    
    _listenToAuthChanges(); 

    ref.onDispose(() {
      _connectivitySubscription?.cancel();
      _authSubscription?.close(); // <-- 4. –î–õ–Ø ProviderSubscription –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø .close()
    });
  }

  void _listenToAuthChanges() {
    _authSubscription = ref.listen<AsyncValue<UserInfo?>>(userInfoStreamProvider, (previous, next) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å "–Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω" –Ω–∞ "–∑–∞–ª–æ–≥–∏–Ω–µ–Ω"
      final wasLoggedIn = previous?.valueOrNull != null;
      final isLoggedIn = next.valueOrNull != null;

      if (!wasLoggedIn && isLoggedIn) {
        print('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        _triggerSync();
      }
    });
  }

  Future<void> _handleConnectivityChange(List<ConnectivityResult> results) async {
    final isOnline = results.any((result) => result != ConnectivityResult.none);

    if (isOnline) {
  print('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏.');
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  final repository = ref.read(currentUserCategoryRepositoryProvider);
  if (repository is CategoryRepositoryImpl) {
    repository.reconnectionAttempt = 0; // –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
  }
  
  _triggerSync();
}

  }

  Future<void> _triggerSync() async {
    try {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã Riverpod —É—Å–ø–µ–ª –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
      await Future.delayed(const Duration(milliseconds: 500));
      
      final repository = ref.read(currentUserCategoryRepositoryProvider);
      
      if (repository != null) {
        print('SYNC_CONTROLLER: –í—ã–∑–æ–≤ repository.syncWithServer() –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        await repository.syncWithServer();
        print('üëç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.');
      } else {
        print('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
      }

       if (repository is CategoryRepositoryImpl) {
        repository.initEventBasedSync(); // –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ websocket 
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> triggerSync() async {
     print('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
     await _triggerSync();
  } 
}