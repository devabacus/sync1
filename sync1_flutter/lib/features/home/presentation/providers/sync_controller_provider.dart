// lib/features/home/presentation/providers/sync_controller_provider.dart

import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:serverpod_auth_client/serverpod_auth_client.dart';

import '../../../../core/providers/session_manager_provider.dart';
import '../../data/providers/category/category_data_providers.dart';

part 'sync_controller_provider.g.dart';

@riverpod
class SyncController extends _$SyncController {
  StreamSubscription? _connectivitySubscription;
  ProviderSubscription? _userSubscription;
  int? _currentUserId;

  @override
  void build() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
    _connectivitySubscription = Connectivity().onConnectivityChanged.listen(_handleConnectivityChange);
    
    // –°–ª—É—à–∞–µ–º —Å–º–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _userSubscription = ref.listen(userInfoStreamProvider, (previous, next) {
      _handleUserChange(previous?.valueOrNull, next.valueOrNull);
    });
    
    // –ü—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    ref.onDispose(() {
      _connectivitySubscription?.cancel();
      _userSubscription?.close();
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final currentUser = ref.read(currentUserProvider);
    _currentUserId = currentUser?.id;
  }

  void _handleUserChange(UserInfo? previousUser, UserInfo? currentUser) async {
    final previousUserId = previousUser?.id;
    final currentUserId = currentUser?.id;

    print('üë§ –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $previousUserId -> $currentUserId');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _currentUserId = currentUserId;

    if (currentUserId != null && previousUserId != currentUserId) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª—Å—è (–≤—Ö–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ)
      print('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final repository = ref.read(currentUserCategoryRepositoryProvider);
        
        if (repository != null) {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
          await _resetSyncMetadata();
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
          await repository.syncWithServer();
          print('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.');
        } else {
          print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      }
    } else if (currentUserId == null && previousUserId != null) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      print('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
    }
  }

  Future<void> _resetSyncMetadata() async {
    try {
      final syncMetadataDao = ref.read(syncMetadataDaoProvider);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–∏—Å—Ç–µ–º—É –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ
      await syncMetadataDao.clearSyncMetadata('categories');
      
      print('üóëÔ∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –°–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ–π.');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> _handleConnectivityChange(List<ConnectivityResult> results) async {
    // –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, –∞ –Ω–µ –∫–æ–≥–¥–∞ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç.
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ 'none'.
    final isOnline = results.any((result) => result != ConnectivityResult.none);

    if (isOnline) {
      print('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (_currentUserId == null) {
        print('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
        return;
      }
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final repository = ref.read(currentUserCategoryRepositoryProvider);
        
        if (repository != null) {
          // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          await repository.syncWithServer();
          print('üëç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.');
        } else {
          print('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
        }
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      }
    } else {
      print('üîå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ç–∏.');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ UI, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
  Future<void> triggerSync() async {
    print('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final repository = ref.read(currentUserCategoryRepositoryProvider);
      
      if (repository != null) {
        await repository.syncWithServer();
        print('üëç –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
      } else {
        print('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      rethrow;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Å–±—Ä–æ—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö + —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
  Future<void> triggerFullSync() async {
    print('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final repository = ref.read(currentUserCategoryRepositoryProvider);
      
      if (repository != null) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await _resetSyncMetadata();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        await repository.syncWithServer();
        print('üëç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
      } else {
        print('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
      rethrow;
    }
  }
}