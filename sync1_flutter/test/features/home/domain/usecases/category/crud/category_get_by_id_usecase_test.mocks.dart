// Mocks generated by Mockito 5.4.6 from annotations
// in sync1/test/features/home/domain/usecases/category/crud/category_get_by_id_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:sync1/features/home/domain/entities/category/category.dart'
    as _i2;
import 'package:sync1/features/home/domain/repositories/category_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoryEntity_0 extends _i1.SmartFake
    implements _i2.CategoryEntity {
  _FakeCategoryEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ICategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockICategoryRepository extends _i1.Mock
    implements _i3.ICategoryRepository {
  MockICategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.CategoryEntity>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i4.Future<List<_i2.CategoryEntity>>.value(
              <_i2.CategoryEntity>[],
            ),
          )
          as _i4.Future<List<_i2.CategoryEntity>>);

  @override
  _i4.Stream<List<_i2.CategoryEntity>> watchCategories() =>
      (super.noSuchMethod(
            Invocation.method(#watchCategories, []),
            returnValue: _i4.Stream<List<_i2.CategoryEntity>>.empty(),
          )
          as _i4.Stream<List<_i2.CategoryEntity>>);

  @override
  _i4.Future<_i2.CategoryEntity> getCategoryById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoryById, [id]),
            returnValue: _i4.Future<_i2.CategoryEntity>.value(
              _FakeCategoryEntity_0(
                this,
                Invocation.method(#getCategoryById, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.CategoryEntity>);

  @override
  _i4.Future<String> createCategory(_i2.CategoryEntity? category) =>
      (super.noSuchMethod(
            Invocation.method(#createCategory, [category]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createCategory, [category]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<bool> updateCategory(_i2.CategoryEntity? category) =>
      (super.noSuchMethod(
            Invocation.method(#updateCategory, [category]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> deleteCategory(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [id]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
