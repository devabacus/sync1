// sync1_server/lib/src/endpoints/category_endpoint.dart
// –ü—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥—ë–∂–Ω–æ–µ production —Ä–µ—à–µ–Ω–∏–µ

import 'dart:async';
import 'package:serverpod/serverpod.dart';
import 'package:sync1_server/src/generated/protocol.dart';

class CategoryEndpoint extends Endpoint {
  // Broadcast stream –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static final StreamController<CategoryChangeEvent> _changeNotifier = 
      StreamController<CategoryChangeEvent>.broadcast();

  // –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  static int _activeConnections = 0;

  Future<Category> createCategory(Session session, Category category) async {
    await Category.db.insertRow(session, category);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏
    _notifyChange(session, CategoryChangeEvent(
      action: 'CREATE',
      categoryId: category.id.toString(),
      timestamp: DateTime.now(),
    ));
    
    return category;
  }

  Future<Category?> getCategoryById(Session session, UuidValue id) async {
    return await Category.db.findById(session, id);
  }

  Future<List<Category>> getCategories(Session session) async {
    return await Category.db.find(
      session,
      orderBy: (c) => c.title,
    );
  }

  Future<bool> updateCategory(Session session, Category category) async {
    try {
      await Category.db.updateRow(session, category);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      _notifyChange(session, CategoryChangeEvent(
        action: 'UPDATE',
        categoryId: category.id.toString(),
        timestamp: DateTime.now(),
      ));
      
      return true;
    } catch (e) {
      session.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      return false;
    }
  }

  Future<bool> deleteCategory(Session session, UuidValue id) async {
    try {
      var result = await Category.db.deleteWhere(
        session,
        where: (c) => c.id.equals(id),
      );
      
      if (result.isNotEmpty) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        _notifyChange(session, CategoryChangeEvent(
          action: 'DELETE',
          categoryId: id.toString(),
          timestamp: DateTime.now(),
        ));
      }
      
      return result.isNotEmpty;
    } catch (e) {
      session.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      return false;
    }
  }

  /// Production-ready real-time streaming
  Stream<List<Category>> watchCategories(Session session) async* {
    _activeConnections++;
    session.log('üü¢ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ real-time –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (${_activeConnections} –∞–∫—Ç–∏–≤–Ω—ã—Ö)');
    
    try {
      // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É
      var categories = await _getCurrentCategories(session);
      yield categories;
      session.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π');

      // 2. –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ broadcast stream
      await for (var changeEvent in _changeNotifier.stream) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
          var updatedCategories = await _getCurrentCategories(session);
          yield updatedCategories;
          session.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${changeEvent.action}: ${updatedCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        } catch (e) {
          session.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º stream –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      }
      
    } catch (e) {
      session.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ watchCategories: $e');
      rethrow;
    } finally {
      _activeConnections--;
      session.log('üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç real-time –∫–∞—Ç–µ–≥–æ—Ä–∏–π (${_activeConnections} –∞–∫—Ç–∏–≤–Ω—ã—Ö)');
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  Future<List<Category>> _getCurrentCategories(Session session) async {
    return await Category.db.find(
      session,
      orderBy: (c) => c.title,
    );
  }

  /// –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  static void _notifyChange(Session session, CategoryChangeEvent event) {
    try {
      if (!_changeNotifier.isClosed) {
        _changeNotifier.add(event);
        session.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${event.action} –¥–ª—è ID ${event.categoryId}');
      }
    } catch (e) {
      session.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
  static int getActiveConnectionsCount() => _activeConnections;

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  static void dispose() {
    if (!_changeNotifier.isClosed) {
      _changeNotifier.close();
    }
    _activeConnections = 0;
  }
}

/// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class CategoryChangeEvent {
  final String action; // CREATE, UPDATE, DELETE
  final String categoryId;
  final DateTime timestamp;

  CategoryChangeEvent({
    required this.action,
    required this.categoryId,
    required this.timestamp,
  });

  @override
  String toString() => 'CategoryChangeEvent($action, $categoryId, $timestamp)';
}