import 'package:serverpod/serverpod.dart';
import 'package:sync1_server/src/generated/protocol.dart';

// –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
const _categoryChannel = 'sync1_category_events';

class CategoryEndpoint extends Endpoint {
  
  // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è "—Ö–æ–ª–æ–¥–Ω–æ–π" —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
  Future<List<Category>> getCategoriesSince(Session session, DateTime? since) async {
    if (since == null) {
      return await getCategories(session);
    }
    
    return await Category.db.find(
      session,
      where: (c) => c.lastModified >= since,
      orderBy: (c) => c.lastModified,
    );
  }

  // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ ---
  Future<void> _notifyChange(Session session, CategorySyncEvent event) async {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–Ω–∞–ª
    await session.messages.postMessage(
      _categoryChannel, 
      event,
    );
    session.log('üîî –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª "$_categoryChannel": ${event.type.name}');
  }

   Future<Category> createCategory(Session session, Category category) async {
    final serverCategory = category.copyWith(
      lastModified: DateTime.now().toUtc(),
    );
    await Category.db.insertRow(session, serverCategory);
    
    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ ---
    await _notifyChange(session, CategorySyncEvent(
      type: SyncEventType.create,
      category: serverCategory,
    ));

    return serverCategory;
  }

  Future<Category?> getCategoryById(Session session, UuidValue id) async {
    return await Category.db.findById(session, id);
  }

  Future<List<Category>> getCategories(Session session) async {
    return await Category.db.find(
      session,
      orderBy: (c) => c.title,
    );
  }

   Future<bool> updateCategory(Session session, Category category) async {
    try {
      final serverCategory = category.copyWith(
        lastModified: DateTime.now().toUtc(),
      );
      await Category.db.updateRow(session, serverCategory);
      
      // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ---
      await _notifyChange(session, CategorySyncEvent(
        type: SyncEventType.update,
        category: serverCategory,
      ));

      return true;
    } catch (e) {
      session.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      return false;
    }
  }


  Future<bool> deleteCategory(Session session, UuidValue id) async {
    try {
      var result = await Category.db.deleteWhere(
        session,
        where: (c) => c.id.equals(id),
      );
      
      if (result.isNotEmpty) {
        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ ---
        await _notifyChange(session, CategorySyncEvent(
          type: SyncEventType.delete,
          id: id,
        ));
      }
      
      return result.isNotEmpty;
    } catch (e) {
      session.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      return false;
    }
  }

  // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: Stream —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è, –∞ –Ω–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ ---
  // –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ watchEvents –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
  Stream<CategorySyncEvent> watchEvents(Session session) async* {
    session.log('üü¢ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–Ω–∞–ª–µ "$_categoryChannel"');
    
    try {
      // –≠—Ç–æ—Ç stream –±–æ–ª—å—à–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫.
      // –û–Ω —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ü–û–°–õ–ï –ø–æ–¥–ø–∏—Å–∫–∏.
      await for (var event in session.messages.createStream<CategorySyncEvent>(_categoryChannel)) {
        session.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É: ${event.type.name}');
        yield event;
      }
    } finally {
      session.log('üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ "$_categoryChannel"');
    }
  }
}