import 'package:serverpod/serverpod.dart';
import 'package:sync1_server/src/generated/protocol.dart';

// –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
const _categoryChannel = 'sync1_category_updates';

class CategoryEndpoint extends Endpoint {
  

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
Future<List<Category>> getCategoriesSince(Session session, DateTime? since) async {
  if (since == null) {
    // –ï—Å–ª–∏ since –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    return await getCategories(session);
  }
  
  return await Category.db.find(
    session,
    where: (c) => c.lastModified>=since,
    orderBy: (c) => c.lastModified,
  );
}

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞.
  Future<void> _notifyChange(Session session, String changeType) async {
    final message = Greeting(
      message: changeType,
      author: 'Server.CategoryEndpoint',
      timestamp: DateTime.now(),
    );
    
    await session.messages.postMessage(
      _categoryChannel, 
      message,
    );
    session.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª "$_categoryChannel": $changeType');
  }

   Future<Category> createCategory(Session session, Category category) async {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞, –Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    final serverCategory = category.copyWith(
      lastModified: DateTime.now().toUtc(),
    );
    await Category.db.insertRow(session, serverCategory);
    await _notifyChange(session, 'CREATE');
    return serverCategory;
  }

  Future<Category?> getCategoryById(Session session, UuidValue id) async {
    return await Category.db.findById(session, id);
  }

  Future<List<Category>> getCategories(Session session) async {
    return await Category.db.find(
      session,
      orderBy: (c) => c.title,
    );
  }

   Future<bool> updateCategory(Session session, Category category) async {
    try {
      // –¢–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      final serverCategory = category.copyWith(
        lastModified: DateTime.now().toUtc(),
      );
      await Category.db.updateRow(session, serverCategory);
      await _notifyChange(session, 'UPDATE');
      return true;
    } catch (e) {
      session.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      return false;
    }
  }


  Future<bool> deleteCategory(Session session, UuidValue id) async {
    try {
      var result = await Category.db.deleteWhere(
        session,
        where: (c) => c.id.equals(id),
      );
      
      if (result.isNotEmpty) {
        await _notifyChange(session, 'DELETE');
      }
      
      return result.isNotEmpty;
    } catch (e) {
      session.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e');
      return false;
    }
  }

  /// Production-ready real-time streaming (—Å–∏–Ω—Ç–∞–∫—Å–∏—Å Serverpod 2.x)
  Stream<List<Category>> watchCategories(Session session) async* {
    session.log('üü¢ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª "$_categoryChannel"');
    
    try {
      // 1. –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫.
      yield await getCategories(session);
      
      await for (var _ in session.messages.createStream(_categoryChannel)) {
        session.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ç—Ä–∏–≥–≥–µ—Ä –∏–∑ Redis, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.');
        
        // –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ –æ—Ç–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫.
        yield await getCategories(session);
      }
    } finally {
      session.log('üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ "$_categoryChannel"');
    }
  }
}