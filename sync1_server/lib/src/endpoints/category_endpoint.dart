import 'package:serverpod/serverpod.dart';
import 'package:sync1_server/src/generated/protocol.dart';

const _categoryChannelBase = 'sync1_category_events_for_user_';

class CategoryEndpoint extends Endpoint {
  
  Future<int> _getAuthenticatedUserId(Session session) async {
    final authInfo = await session.authenticated;
    final userId = authInfo?.userId;

    if (userId == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.');
    }
    return userId;
  }

  Future<void> _notifyChange(Session session, CategorySyncEvent event, int userId) async {
    final channel = '$_categoryChannelBase$userId';
    await session.messages.postMessage(channel, event);
    session.log('üîî –°–æ–±—ã—Ç–∏–µ ${event.type.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª "$channel"');
  }

  Future<Category> createCategory(Session session, Category category) async {
    final userId = await _getAuthenticatedUserId(session);
    // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è
    final serverCategory = category.copyWith(
      userId: userId,
      lastModified: DateTime.now().toUtc(),
      isDeleted: false,      
    );
    final createdCategory = await Category.db.insertRow(session, serverCategory);
    await _notifyChange(session, CategorySyncEvent(
      type: SyncEventType.create,
      category: createdCategory,
    ), userId);
    return createdCategory;
  }

  // –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ù–ï —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
  Future<List<Category>> getCategories(Session session) async {
    final userId = await _getAuthenticatedUserId(session);
    return await Category.db.find(
      session,
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä isDeleted == false
      where: (c) => c.userId.equals(userId) & c.isDeleted.equals(false),
      orderBy: (c) => c.title,
    );
  }

   Future<Category?> getCategoryById(Session session, UuidValue id) async {
    final userId = await _getAuthenticatedUserId(session);
    
    return await Category.db.findFirstRow(
      session,
      where: (c) => c.id.equals(id) & c.userId.equals(userId) & c.isDeleted.equals(false),
    );
  }

  // –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –≤–∫–ª—é—á–∞—è "–Ω–∞–¥–≥—Ä–æ–±–∏—è"
  Future<List<Category>> getCategoriesSince(Session session, DateTime? since) async {
    final userId = await _getAuthenticatedUserId(session);
    // –ï—Å–ª–∏ since –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–¥–ª—è –ø–µ—Ä–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    if (since == null) {
      return getCategories(session);
    }

    // –ï—Å–ª–∏ since —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï, —á—Ç–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ
    return await Category.db.find(
      session,
      where: (c) => c.userId.equals(userId) & (c.lastModified >= since),
      orderBy: (c) => c.lastModified,
    );
  }

  Future<bool> updateCategory(Session session, Category category) async {
    final userId = await _getAuthenticatedUserId(session);
    final originalCategory = await Category.db.findFirstRow(
      session,
      where: (c) => c.id.equals(category.id) & c.userId.equals(userId) & c.isDeleted.equals(false),
    );
    if (originalCategory == null) {
      return false; 
    }
    final serverCategory = category.copyWith(
      userId: userId,
      lastModified: DateTime.now().toUtc(),
    );
    try {
      await Category.db.updateRow(session, serverCategory);
      await _notifyChange(session, CategorySyncEvent(
        type: SyncEventType.update,
        category: serverCategory,
      ), userId);
      return true;
    } catch (e) {
      return false;
    }
  }

  // –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –Ω–µ —É–¥–∞–ª—è–µ—Ç, –∞ —Å—Ç–∞–≤–∏—Ç —Ñ–ª–∞–≥ isDeleted = true
  Future<bool> deleteCategory(Session session, UuidValue id) async {
    final userId = await _getAuthenticatedUserId(session);
    
    // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
    final originalCategory = await Category.db.findFirstRow(
      session,
      where: (c) => c.id.equals(id) & c.userId.equals(userId),
    );

    if (originalCategory == null) return false;

    // –°–æ–∑–¥–∞–µ–º "–Ω–∞–¥–≥—Ä–æ–±–∏–µ"
    final tombstone = originalCategory.copyWith(
      isDeleted: true,
      lastModified: DateTime.now().toUtc(),
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    final result = await Category.db.updateRow(session, tombstone);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –£–î–ê–õ–ï–ù–ò–ò, –Ω–æ —Å –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å—å—é-"–Ω–∞–¥–≥—Ä–æ–±–∏–µ–º"
    await _notifyChange(session, CategorySyncEvent(
      type: SyncEventType.delete,
      category: result, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–Ω–∞–¥–≥—Ä–æ–±–∏–µ"
      id: id,
    ), userId);

    return true;
  }

  Stream<CategorySyncEvent> watchEvents(Session session) async* {
    final userId = await _getAuthenticatedUserId(session);
    final channel = '$_categoryChannelBase$userId';
    session.log('üü¢ –ö–ª–∏–µ–Ω—Ç (user: $userId) –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–Ω–∞–ª–µ "$channel"');
    try {
      await for (var event in session.messages.createStream<CategorySyncEvent>(channel)) {
        session.log('üîÑ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ ${event.type.name} –∫–ª–∏–µ–Ω—Ç—É (user: $userId)');
        yield event;
      }
    } finally {
      session.log('üî¥ –ö–ª–∏–µ–Ω—Ç (user: $userId) –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ "$channel"');
    }
  }
}